[["index.html", "R Coding Compendium Chapter 1 A Monument to my Madness", " R Coding Compendium Ryan Schneider 2021-07-09 Chapter 1 A Monument to my Madness This book contains all my personal coding notes from the last two years. Why am I doing this? Probably because Im a glutton for punishment, and Id rather procrastinate than write my dissertation proposal. "],["introduction-r-basics.html", "Chapter 2 Introduction: R Basics", " Chapter 2 Introduction: R Basics There are lots of things you can do with base R commands, but this notebook focuses on the tidyverse. These packages (below) improve on almost every single aspect of base Rs functioning, and make different tasks far easier, more code efficient, and faster. readr for example, replaces the base read.xyz commands and greatly enhances functionality for reading in data. The forcats package makes manipulating factors a breeze, and stringr makes searching through and manipulating vectors of strings super easy. Purrr is for semi-advanced uses (e.g.Â For loops) that you probably wont use early on, but will be essential and invaluable if you have some iterative or repetitive code or task you want to perform. Tidyr is amazing for getting clean datasets upon import. Lets get stuckin library(tidyverse) "],["wrangle-data.html", "Chapter 3 Wrangle Data 3.1 Joining or Splitting 3.2 Selecting specific columns/variables 3.3 If-then and Case-when", " Chapter 3 Wrangle Data This chapter contains useful tips on wrangling (i.e., manipulating) data. If you need to know to do to things like create new variables, split one variable into multiple variables, pivot a data set from wide to long, etc., look no further. 3.1 Joining or Splitting Joining and splitting data is pretty straightforward. 3.1.1 Data The code below is from this excellent tutorial set.seed(2018) df1=data.frame(customer_id=c(1:10), product=sample(c(&#39;toaster&#39;,&#39;TV&#39;,&#39;Dishwasher&#39;),10,replace = TRUE)) df2=data.frame(customer_id=c(sample(df1$customer_id, 5)),state=sample(c(&#39;New York&#39;,&#39;California&#39;),5,replace = TRUE)) df1=tibble::as_tibble(df1) df2=tibble::as_tibble(df2) # df1 =left table # df2= right table # inner join - retains only rows with values that appear in both tables, and matches by keys df1 %&gt;% inner_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 5 x 3 ## customer_id product state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Dishwasher New York ## 2 3 Dishwasher New York ## 3 6 toaster New York ## 4 8 Dishwasher New York ## 5 9 Dishwasher New York # If you&#39;re joining two Qualtrics surveys together, this is most likely the one you want to use (e.g. matching by participant name, and only keeping rows in the joined data set for participants that have responses logged in both survey 1 and survey 2 # left join - returns everything in the left, and rows with matching keys in the right df1 %&gt;% left_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 10 x 3 ## customer_id product state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Dishwasher New York ## 2 2 Dishwasher &lt;NA&gt; ## 3 3 Dishwasher New York ## 4 4 toaster &lt;NA&gt; ## 5 5 TV &lt;NA&gt; ## 6 6 toaster New York ## 7 7 toaster &lt;NA&gt; ## 8 8 Dishwasher New York ## 9 9 Dishwasher New York ## 10 10 TV &lt;NA&gt; # right join - returns everything in the right, and rows with matching keys in the left df1 %&gt;% right_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 5 x 3 ## customer_id product state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Dishwasher New York ## 2 3 Dishwasher New York ## 3 6 toaster New York ## 4 8 Dishwasher New York ## 5 9 Dishwasher New York # note: example if the customer id column was named something different in the second df #df1 %&gt;% left_join(df2,by=c(&#39;customer_id&#39;=&#39;name2&#39;)) #full join - retain all rows from both tables, and join matching keys in both right and left df1 %&gt;% full_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 10 x 3 ## customer_id product state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Dishwasher New York ## 2 2 Dishwasher &lt;NA&gt; ## 3 3 Dishwasher New York ## 4 4 toaster &lt;NA&gt; ## 5 5 TV &lt;NA&gt; ## 6 6 toaster New York ## 7 7 toaster &lt;NA&gt; ## 8 8 Dishwasher New York ## 9 9 Dishwasher New York ## 10 10 TV &lt;NA&gt; # anti join - returns all rows in the left that do not have matching keys in the right df1 %&gt;% anti_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 5 x 2 ## customer_id product ## &lt;int&gt; &lt;chr&gt; ## 1 2 Dishwasher ## 2 4 toaster ## 3 5 TV ## 4 7 toaster ## 5 10 TV 3.1.2 Individual Columns/Variables Splitting or joining columns is much easier than doing it to whole data sets. You can use dplyr::separate() to accomplish the former, and dplyr::unite() for the latter. print(&quot;hello&quot;) ## [1] &quot;hello&quot; 3.2 Selecting specific columns/variables Sometimes when working with a data set, you want to work with a few specific variables. For instance, maybe you want to view a graph of only reverse-coded variables (which start with the prefix r); or maybe you want to create a subset of your data that has a few specific variables removed. For this you can use dplyr::select() and its associated helper commands select() can be thought of as extract; it tells R to identify and extract a specific variable (or variables) cars=mtcars # select one column cars %&gt;% select(mpg) ## mpg ## Mazda RX4 21.0 ## Mazda RX4 Wag 21.0 ## Datsun 710 22.8 ## Hornet 4 Drive 21.4 ## Hornet Sportabout 18.7 ## Valiant 18.1 ## Duster 360 14.3 ## Merc 240D 24.4 ## Merc 230 22.8 ## Merc 280 19.2 ## Merc 280C 17.8 ## Merc 450SE 16.4 ## Merc 450SL 17.3 ## Merc 450SLC 15.2 ## Cadillac Fleetwood 10.4 ## Lincoln Continental 10.4 ## Chrysler Imperial 14.7 ## Fiat 128 32.4 ## Honda Civic 30.4 ## Toyota Corolla 33.9 ## Toyota Corona 21.5 ## Dodge Challenger 15.5 ## AMC Javelin 15.2 ## Camaro Z28 13.3 ## Pontiac Firebird 19.2 ## Fiat X1-9 27.3 ## Porsche 914-2 26.0 ## Lotus Europa 30.4 ## Ford Pantera L 15.8 ## Ferrari Dino 19.7 ## Maserati Bora 15.0 ## Volvo 142E 21.4 # select multiple columns, if they are all next to one another cars %&gt;% select(mpg:hp) ## mpg cyl disp hp ## Mazda RX4 21.0 6 160.0 110 ## Mazda RX4 Wag 21.0 6 160.0 110 ## Datsun 710 22.8 4 108.0 93 ## Hornet 4 Drive 21.4 6 258.0 110 ## Hornet Sportabout 18.7 8 360.0 175 ## Valiant 18.1 6 225.0 105 ## Duster 360 14.3 8 360.0 245 ## Merc 240D 24.4 4 146.7 62 ## Merc 230 22.8 4 140.8 95 ## Merc 280 19.2 6 167.6 123 ## Merc 280C 17.8 6 167.6 123 ## Merc 450SE 16.4 8 275.8 180 ## Merc 450SL 17.3 8 275.8 180 ## Merc 450SLC 15.2 8 275.8 180 ## Cadillac Fleetwood 10.4 8 472.0 205 ## Lincoln Continental 10.4 8 460.0 215 ## Chrysler Imperial 14.7 8 440.0 230 ## Fiat 128 32.4 4 78.7 66 ## Honda Civic 30.4 4 75.7 52 ## Toyota Corolla 33.9 4 71.1 65 ## Toyota Corona 21.5 4 120.1 97 ## Dodge Challenger 15.5 8 318.0 150 ## AMC Javelin 15.2 8 304.0 150 ## Camaro Z28 13.3 8 350.0 245 ## Pontiac Firebird 19.2 8 400.0 175 ## Fiat X1-9 27.3 4 79.0 66 ## Porsche 914-2 26.0 4 120.3 91 ## Lotus Europa 30.4 4 95.1 113 ## Ford Pantera L 15.8 8 351.0 264 ## Ferrari Dino 19.7 6 145.0 175 ## Maserati Bora 15.0 8 301.0 335 ## Volvo 142E 21.4 4 121.0 109 # select multiple columns by name (when not next to one another) cars %&gt;% select(c(mpg, hp, wt)) ## mpg hp wt ## Mazda RX4 21.0 110 2.620 ## Mazda RX4 Wag 21.0 110 2.875 ## Datsun 710 22.8 93 2.320 ## Hornet 4 Drive 21.4 110 3.215 ## Hornet Sportabout 18.7 175 3.440 ## Valiant 18.1 105 3.460 ## Duster 360 14.3 245 3.570 ## Merc 240D 24.4 62 3.190 ## Merc 230 22.8 95 3.150 ## Merc 280 19.2 123 3.440 ## Merc 280C 17.8 123 3.440 ## Merc 450SE 16.4 180 4.070 ## Merc 450SL 17.3 180 3.730 ## Merc 450SLC 15.2 180 3.780 ## Cadillac Fleetwood 10.4 205 5.250 ## Lincoln Continental 10.4 215 5.424 ## Chrysler Imperial 14.7 230 5.345 ## Fiat 128 32.4 66 2.200 ## Honda Civic 30.4 52 1.615 ## Toyota Corolla 33.9 65 1.835 ## Toyota Corona 21.5 97 2.465 ## Dodge Challenger 15.5 150 3.520 ## AMC Javelin 15.2 150 3.435 ## Camaro Z28 13.3 245 3.840 ## Pontiac Firebird 19.2 175 3.845 ## Fiat X1-9 27.3 66 1.935 ## Porsche 914-2 26.0 91 2.140 ## Lotus Europa 30.4 113 1.513 ## Ford Pantera L 15.8 264 3.170 ## Ferrari Dino 19.7 175 2.770 ## Maserati Bora 15.0 335 3.570 ## Volvo 142E 21.4 109 2.780 If you need to do some more complex selection (e.g., select all variables that start or end with a certain pattern; all columns that contain a certain pattern; etc.), see THIS LINK for a simple but detailed guide. 3.3 If-then and Case-when &quot;hello&quot; ## [1] &quot;hello&quot; "],["clean-data.html", "Chapter 4 Clean Data", " Chapter 4 Clean Data "],["working-with-factors.html", "Chapter 5 Working with Factors", " Chapter 5 Working with Factors "],["working-with-strings.html", "Chapter 6 Working with Strings", " Chapter 6 Working with Strings "],["figures-and-graphs.html", "Chapter 7 Figures and Graphs", " Chapter 7 Figures and Graphs "],["tables.html", "Chapter 8 Tables", " Chapter 8 Tables "],["misc-stuff.html", "Chapter 9 Misc. Stuff", " Chapter 9 Misc. Stuff "],["introduction-to-functions-and-loops.html", "Chapter 10 Introduction to Functions and Loops", " Chapter 10 Introduction to Functions and Loops "],["intro-to-r-markdown.html", "Chapter 11 Intro to R Markdown", " Chapter 11 Intro to R Markdown "],["statistics-stuff.html", "Chapter 12 Statistics Stuff", " Chapter 12 Statistics Stuff "]]
