[["index.html", "R Coding Compendium Chapter 1 A Monument to my Madness 1.1 What this book is, and what it is not", " R Coding Compendium Ryan Schneider 2021-07-27 Chapter 1 A Monument to my Madness This book contains all my personal coding notes from the last two years. Why am I doing this? Probably because Im a glutton for punishment, and Id rather procrastinate than write my dissertation proposal. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 1.1 What this book is, and what it is not You know those absolutely amazing, comprehensive guides where you can learn everything you need to know about R? This is is not one of those guides. This book is designed as a quick reference guide for many of the most common things youll need to do in everyday data analysis and research. Think of it like a coding dictionary, as opposed to a manual or comprehensive text. If you want (or need) to learn R in-depth and/or from the ground up (i.e., youre a novice user), then you should go read Hadley Wickhams book and the tidyverse websites. Also, these slides might be a good high-level overview if youve never used the tidyverse before. That said, if youre already familiar with R and the tidyverse and just need a quick reference for what command do I need to accomplish XYZ, youve come to the right place. "],["introduction-r-basics.html", "Chapter 2 Introduction: R Basics 2.1 Importing Data 2.2 Exporting (i.e., saving) Data and Output", " Chapter 2 Introduction: R Basics For the love of God before you do anything, familiarize yourself with R Projects and the here package. These make R so much more user friendly and less of a nightmare. If you need an overview, go here: http://jenrichmond.rbind.io/post/how-to-use-the-here-package/ Now lets get stuck in. library(tidyverse) 2.1 Importing Data 2.1.1 Spreadsheets See https://nacnudus.github.io/spreadsheet-munging-strategies/index.html for more detailed and in-depth tutorials (if you need that kind of thing) 2.2 Exporting (i.e., saving) Data and Output 2.2.1 Exporting to .CSV Generally speaking, unless you have a specific reason to, dont. But if you must: write_csv() 2.2.2 Export to .RData (and load the data again later) save(obj_name, file=here::here(&quot;subfolder&quot;, &quot;save_file_name&quot;), compress = FALSE) load(here::here(&quot;folder&quot;, &quot;save_name.RData&quot;)) 2.2.3 Export to Excel library(openxlsx) #Method 1: If you only want to export 1 thing, and/or only need output document #write as object, with no formatting: write.xlsx(objectname,file = &quot;filenamehere.xlsx&quot;,colnames=TRUE, borders=&quot;columns&quot;) #write as table: write.xlsx(objectname,&quot;filename.xlsx&quot;,asTable = TRUE) #Method 2: If you want to do the above, but add multiple objects or tables to one workbook/file: ## first Create Workbook object wb &lt;- createWorkbook(&quot;AuthorName&quot;) #then add worksheets (as many as desired) addWorksheet(wb, &quot;worksheetnamehere&quot;) #then write the object to the worksheet writeData(wb, &quot;test&quot;, nameofobjectordataframe, startCol = 2, startRow = 3, rowNames = TRUE) #save excel file saveWorkbook(wb, &quot;filenamehere.xlsx&quot;, overwrite =TRUE) #Method 3: exact same as method 2, but creating a more fancy tables wb &lt;- createWorkbook(&quot;Ryan&quot;) addWorksheet(wb, &quot;worksheetnamehere&quot;) writeDataTable(wb, sheetName, objectName, startCol = 1, startRow = 1, colNames = TRUE, rowNames = FALSE, tableStyle=&quot;TableStyleLight2&quot;,tableName=NULL, headerStyle = NULL,withFilter=FALSE,keepNA=TRUE,sep=&quot;, &quot;, stack = FALSE, firstColumn = FALSE, lastColumn = FALSE,bandedRows = TRUE,bandedCols = FALSE) saveWorkbook(wb, &quot;filenamehere.xlsx&quot;, overwrite =TRUE) 2.2.4 Access/edit specific cell number values rainbow=tibble::tribble(~Color, &quot;red&quot;, &quot;orange&quot;, &quot;black&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;) rainbow$Color[3] # access, but can&#39;t overwrite this way ## [1] &quot;black&quot; rainbow[3,&quot;Color&quot;] # access and can overwrite ## # A tibble: 1 x 1 ## Color ## &lt;chr&gt; ## 1 black rainbow[3, &quot;Color&quot;]= &quot;yellow&quot; # save this value to row 3 in column &quot;Color&quot; rainbow ## # A tibble: 6 x 1 ## Color ## &lt;chr&gt; ## 1 red ## 2 orange ## 3 yellow ## 4 green ## 5 blue ## 6 purple "],["wrangle-data.html", "Chapter 3 Wrangle Data 3.1 Joining or Splitting 3.2 Selecting specific columns/variables 3.3 If, If-then, and Case-when 3.4 Merge or Collapse variables 3.5 Apply a function to multiple variables at once 3.6 Pivoting (i.e., transposing) data 3.7 Managing Many Models 3.8 Turn row names into a column/variable 3.9 How to edit/change column names 3.10 Re-order columns in a data set 3.11 Working with date and time variables", " Chapter 3 Wrangle Data This chapter contains useful tips on wrangling (i.e., manipulating) data. If you need to know to do to things like create new variables, split one variable into multiple variables, pivot a data set from wide to long, etc., look no further. If you want a pretty good intro tutorial to the dplyr package, click here 3.1 Joining or Splitting Joining and splitting data is pretty straightforward. 3.1.1 Whole Data Sets The code below is from this excellent tutorial set.seed(2018) df1=data.frame(customer_id=c(1:10), product=sample(c(&#39;toaster&#39;,&#39;TV&#39;,&#39;Dishwasher&#39;),10,replace = TRUE)) df2=data.frame(customer_id=c(sample(df1$customer_id, 5)),state=sample(c(&#39;New York&#39;,&#39;California&#39;),5,replace = TRUE)) df1=tibble::as_tibble(df1) df2=tibble::as_tibble(df2) # df1 =left table # df2= right table Inner join - retains only rows with values that appear in both tables, and matches by keys. If youre joining two Qualtrics surveys together, this is most likely the one you want to use (e.g.Â matching by participant name, and only keeping rows in the joined data set for participants that have responses logged in both survey 1 and survey 2 df1 %&gt;% inner_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 5 x 3 ## customer_id product state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Dishwasher New York ## 2 3 Dishwasher New York ## 3 6 toaster New York ## 4 8 Dishwasher New York ## 5 9 Dishwasher New York Left join - returns everything in the left, and rows with matching keys in the right df1 %&gt;% left_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 10 x 3 ## customer_id product state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Dishwasher New York ## 2 2 Dishwasher &lt;NA&gt; ## 3 3 Dishwasher New York ## 4 4 toaster &lt;NA&gt; ## 5 5 TV &lt;NA&gt; ## 6 6 toaster New York ## 7 7 toaster &lt;NA&gt; ## 8 8 Dishwasher New York ## 9 9 Dishwasher New York ## 10 10 TV &lt;NA&gt; Right join - returns everything in the right, and rows with matching keys in the left df1 %&gt;% right_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 5 x 3 ## customer_id product state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Dishwasher New York ## 2 3 Dishwasher New York ## 3 6 toaster New York ## 4 8 Dishwasher New York ## 5 9 Dishwasher New York # note: example if the customer id column was named something different in the second df #df1 %&gt;% left_join(df2,by=c(&#39;customer_id&#39;=&#39;name2&#39;)) Full join - retain all rows from both tables, and join matching keys in both right and left df1 %&gt;% full_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 10 x 3 ## customer_id product state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Dishwasher New York ## 2 2 Dishwasher &lt;NA&gt; ## 3 3 Dishwasher New York ## 4 4 toaster &lt;NA&gt; ## 5 5 TV &lt;NA&gt; ## 6 6 toaster New York ## 7 7 toaster &lt;NA&gt; ## 8 8 Dishwasher New York ## 9 9 Dishwasher New York ## 10 10 TV &lt;NA&gt; Anti join - returns all rows in the left that do not have matching keys in the right df1 %&gt;% anti_join(df2,by=&#39;customer_id&#39;) ## # A tibble: 5 x 2 ## customer_id product ## &lt;int&gt; &lt;chr&gt; ## 1 2 Dishwasher ## 2 4 toaster ## 3 5 TV ## 4 7 toaster ## 5 10 TV 3.1.2 Individual Columns/Variables Splitting or joining columns is much easier than doing it to whole data sets. You can use dplyr::separate() to accomplish the former, and dplyr::unite() for the latter. print(&quot;hello&quot;) ## [1] &quot;hello&quot; 3.2 Selecting specific columns/variables Sometimes when working with a data set, you want to work with a few specific variables. For instance, maybe you want to view a graph of only reverse-coded variables (which start with the prefix r); or maybe you want to create a subset of your data that has a few specific variables removed. For this you can use dplyr::select() and its associated helper commands select() can be thought of as extract; it tells R to identify and extract a specific variable (or variables) cars=mtcars # select one column cars %&gt;% select(mpg) # select multiple columns, if they are all next to one another cars %&gt;% select(mpg:hp) # select multiple columns by name (when not next to one another) by defining them in a vector cars %&gt;% select(c(mpg, hp, wt)) # select only variables that start with a certain prefix/character/pattern/etc. cars %&gt;% select(starts_with(&quot;d&quot;)) # ...or columns that end with a certain prefix/etc. cars %&gt;% select(ends_with(&quot;t&quot;)) # ...or contains a certain pattern or string cars %&gt;% select(contains(&quot;se&quot;)) # select ALL OF the variables in a data set that match those of a pre-defined vector # first define the names in a vector vars=c(&quot;hp&quot;, &quot;drat&quot;, &quot;gear&quot;, &quot;carb&quot;) #now use helper cars %&gt;% select(all_of(vars)) # select ANY OF the variables in a pre-defined vector vars_2=c(&quot;hp&quot;, &quot;drat&quot;, &quot;watermelon&quot;, &quot;grilled_cheese&quot;) # only the first two will be in the data cars %&gt;% select(any_of(vars_2)) # only (and all of) the variables actually PRESENT in the data are pulled # select only variables of a certain class or type cars %&gt;% select(where(is.numeric)) cars %&gt;% select(where(is.character)) Other examples can be seen on THIS LINK for a simple but detailed guide. 3.3 If, If-then, and Case-when 3.3.1 If-then The premise of an if/then or if/else statement is simple: If condition 1 is satisfied, perform x operation; if not, then do y mtcars %&gt;% mutate(power_level=ifelse(mtcars$hp&lt;350, &quot;Low&quot;, &quot;High&quot;)) # if the length in Sepal.Length is &gt;5, set new variable = to &quot;short&quot;; else, set it to &quot;long&quot; ## mpg cyl disp hp drat wt qsec vs am gear carb power_level ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 Low ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 Low ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 Low ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 Low ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 Low ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 Low ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 Low ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 Low ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 Low ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 Low ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 Low ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 Low ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 Low ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 Low ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 Low ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 Low ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 Low ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 Low ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 Low ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 Low ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 Low ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 Low ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 Low ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 Low ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 Low ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 Low ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 Low ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 Low ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 Low ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 Low ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 Low ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 Low 3.3.2 Case-when When you have 3+ conditions, its easier to use case-when. This is a more simple and straightforward approach than nesting multiple if-else commands My_vector= case_when( Condition1 ~ value1, Condition2 ~ value2, Condition3 ~ value3 TRUE ~ valueForEverythingElse #catch all for things that don&#39;t meet the above conditions ) Example: mtcars %&gt;% mutate(test= case_when(cyl==4 ~ &quot;small&quot;, cyl==6 ~ &quot;medium&quot;, cyl==8 ~ &quot;large&quot;)) %&gt;% select(c(cyl,test)) ## cyl test ## Mazda RX4 6 medium ## Mazda RX4 Wag 6 medium ## Datsun 710 4 small ## Hornet 4 Drive 6 medium ## Hornet Sportabout 8 large ## Valiant 6 medium ## Duster 360 8 large ## Merc 240D 4 small ## Merc 230 4 small ## Merc 280 6 medium ## Merc 280C 6 medium ## Merc 450SE 8 large ## Merc 450SL 8 large ## Merc 450SLC 8 large ## Cadillac Fleetwood 8 large ## Lincoln Continental 8 large ## Chrysler Imperial 8 large ## Fiat 128 4 small ## Honda Civic 4 small ## Toyota Corolla 4 small ## Toyota Corona 4 small ## Dodge Challenger 8 large ## AMC Javelin 8 large ## Camaro Z28 8 large ## Pontiac Firebird 8 large ## Fiat X1-9 4 small ## Porsche 914-2 4 small ## Lotus Europa 4 small ## Ford Pantera L 8 large ## Ferrari Dino 6 medium ## Maserati Bora 8 large ## Volvo 142E 4 small 3.4 Merge or Collapse variables Sometimes youll have multiple variables and you want to collapse them into a single variable. The pmin() command is useful for this example_data=tribble(~A,~B,~C, 1,NA,NA, 2,NA,NA, 3,NA,NA, NA,4,NA, NA,5,NA, NA,6,NA, NA,NA,7, NA,NA,8, NA,NA,9) example_data %&gt;% mutate(accept_reject = pmin(A,B,C,na.rm = TRUE)) ## # A tibble: 9 x 4 ## A B C accept_reject ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 NA NA 1 ## 2 2 NA NA 2 ## 3 3 NA NA 3 ## 4 NA 4 NA 4 ## 5 NA 5 NA 5 ## 6 NA 6 NA 6 ## 7 NA NA 7 7 ## 8 NA NA 8 8 ## 9 NA NA 9 9 3.5 Apply a function to multiple variables at once You can either specify each column individually, like above, or tell R to identify columns for you based on their type or their name. This requires adding in one additional verbeither contains() or where() depending on what you want to do. Two simple examples: # turn multiple variables into factors ex_data=dplyr::tribble(~color, ~car, &quot;red&quot;, &quot;corvette&quot;, &quot;blue&quot;, &quot;chevelle&quot;, &quot;green&quot;, &quot;camaro&quot;, &quot;red&quot;, &quot;corvette&quot;, &quot;green&quot;, &quot;chevelle&quot;, &quot;yellow&quot;, &quot;gto&quot;) dplyr::glimpse(ex_data) ## Rows: 6 ## Columns: 2 ## $ color &lt;chr&gt; &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;red&quot;, &quot;green&quot;, &quot;yellow&quot; ## $ car &lt;chr&gt; &quot;corvette&quot;, &quot;chevelle&quot;, &quot;camaro&quot;, &quot;corvette&quot;, &quot;chevelle&quot;, &quot;gto&quot; ex_data %&gt;% mutate(across(c(color, car),factor)) ## # A tibble: 6 x 2 ## color car ## &lt;fct&gt; &lt;fct&gt; ## 1 red corvette ## 2 blue chevelle ## 3 green camaro ## 4 red corvette ## 5 green chevelle ## 6 yellow gto # round multiple columns to 1 decimal place mtcars %&gt;% mutate(across(c(disp:qsec),round,1)) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.9 2.6 16.5 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.9 2.9 17.0 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.9 2.3 18.6 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.1 3.2 19.4 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.1 3.4 17.0 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.8 3.5 20.2 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.2 3.6 15.8 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.7 3.2 20.0 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.9 3.1 22.9 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.9 3.4 18.3 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.9 3.4 18.9 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.1 4.1 17.4 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.1 3.7 17.6 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.1 3.8 18.0 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.9 5.2 18.0 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.0 5.4 17.8 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.2 5.3 17.4 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.1 2.2 19.5 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.9 1.6 18.5 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.2 1.8 19.9 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.7 2.5 20.0 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.8 3.5 16.9 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.1 3.4 17.3 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.7 3.8 15.4 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.1 3.8 17.0 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.1 1.9 18.9 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.4 2.1 16.7 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.8 1.5 16.9 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.2 3.2 14.5 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.6 2.8 15.5 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.5 3.6 14.6 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.1 2.8 18.6 1 1 4 2 3.6 Pivoting (i.e., transposing) data 3.6.1 Condense multiple rows into a single column (pivot wide to long) Rearranging data like this can make it easier to work with and analyze. Example below from my gradebook for stats (exported from Canvas). The original file had every assignment in its own column, but that is a pain when youre trying to analyze sums, patterns, etc. across people and assignment categories. # general command structure pivot_longer( # Transpose lengthwise by: cols = everything(), # Taking ALL variable names... names_to=&quot;variable&quot;, # ...and dumping them into this new variable values_to=&quot;missing_count&quot;) #...then place their values in this new column NOTE!!! Pivoting data from wide to long like this expands the number of rows to make a matrix so that (for example, each student now has as a row for each assignment). Therefore, you can only pivot longways (or wide) ONCE, otherwise you will make duplicates. If you need to pivot multiple columns, just include all of the columns in one single pivot; do not use two separate, back to back pivot commands. Example: gradebook=tibble::tribble( ~Student, ~Homework.1, ~Homework.2, ~Homework.3, ~Homework.4, ~Homework.5, ~Quiz.1, ~Quiz.2, ~Quiz.3, ~Quiz.4, ~Final, &quot;Bob&quot;, 19L, 0L, 13, 16, 0L, 21, 7L, 15, 17.5, 33, &quot;Jane&quot;, 17L, 19L, 16, 16.5, 25L, 21.5, 19L, 14.75, 9.5, 39.5, &quot;John&quot;, 19L, 19L, 14.5, 19.5, 25L, 21, 21L, 18.5, 17, 46.5 ) head(gradebook) ## # A tibble: 3 x 11 ## Student Homework.1 Homework.2 Homework.3 Homework.4 Homework.5 Quiz.1 Quiz.2 Quiz.3 Quiz.4 Final ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Bob 19 0 13 16 0 21 7 15 17.5 33 ## 2 Jane 17 19 16 16.5 25 21.5 19 14.8 9.5 39.5 ## 3 John 19 19 14.5 19.5 25 21 21 18.5 17 46.5 gradebook=gradebook %&gt;% pivot_longer( # Transpose lengthwise by: cols = Homework.1:Final, # Taking these variables names_to=&quot;Assignment&quot;, # ...and dumping them into this new variable, storing them lengthwise values_to=&quot;Points&quot;) #...then place their values in this new column gradebook ## # A tibble: 30 x 3 ## Student Assignment Points ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Bob Homework.1 19 ## 2 Bob Homework.2 0 ## 3 Bob Homework.3 13 ## 4 Bob Homework.4 16 ## 5 Bob Homework.5 0 ## 6 Bob Quiz.1 21 ## 7 Bob Quiz.2 7 ## 8 Bob Quiz.3 15 ## 9 Bob Quiz.4 17.5 ## 10 Bob Final 33 ## # ... with 20 more rows 3.7 Managing Many Models Imagine the concept of Russian Dolls, applied to data sets. You can manage data sets more effectively my collapsing them into a single tiny, mini data frame, and stuffing that inside of another one. This is done via nesting Effectively, you smush/collapse everything down so it fits inside one column. You can unnest to expand this data back out later when you need it, and keep it collapsed when you dont. Code works like this: by_country=gapminder::gapminder %&gt;% group_by(continent,country) %&gt;% # indicate the variables to keep at the top level nest() # smush the rest into a list-column country_model=function(df){ lm(lifExp~year1950,data = df) } # Transform a list of models into a df models=by_country %&gt;% mutate(mod=map(data,country_model)) You can store anything in a data frame. You can keep the df connected to the model, which makes it very easy to manage a whole slew of related models You can use functional programming (i.e., iterative functions) to map functions or combinations of functions in new ways. Converting data into tidy data sets gives you a whole new way (and easier way) to manage lots of information Below is the full script I copied from Hadley Wickhams lecture, which you can watch here pacman::p_load(dplyr,purrr,tidyverse,gapminder) #### Workflow for managing many models in R #### # 1. Nest data with {tidyr} # 2. Use {purrr} to map a modeling function # 3. Use {broom} to inspect your tidy data gapminder=gapminder %&gt;% mutate(year1950= year-1950) #the number of years it&#39;s been since 1950 #-------------------------------------------------------------------------------------------- #### Step 1. Nest the data. #### # A nested data frame has one column per country. You&#39;re essentially # creating a Russian doll; a data frame inside of a larger data frame. by_country=gapminder %&gt;% group_by(continent,country) %&gt;% # variables to keep at the top level nest() # smush everything else into a df, and store this mini-df in its own column # with this, you can have an entire table per row; a whole data frame for each country # Essentially condensing a list into a table by_country$data[[1]] #-------------------------------------------------------------------------------------------- #### Step 2. Use purrr to map stuff. #### # 12:50 country_model=function(df){ lm(lifeExp ~ year1950, data = df) } models= by_country %&gt;% mutate( mod=map(data,country_model) ) gapminder %&gt;% group_by(continent,country) %&gt;% nest() %&gt;% mutate( mod= data %&gt;% map(country_model) ) # 27:11 #-------------------------------------------------------------------------------------------- ##### Step 3. #### # This creates another nested df inside of your main data frame that has the summary stats of each model models=models %&gt;% mutate( tidy=map(mod, broom::tidy), # tidy() gives model estimates glance=map(mod,broom::glance), # glance() gives model summaries augment=map(mod,broom::augment) # model coefficients ) # What can you do with this nest of data frames? # The reverse of step 1; un-nest it to unpack everything! # 34:40 # Keeps a massive list of related information neatly organized! unnest(models,data) # back to where we started unnest(models,glance, .drop = TRUE) unnest(models,tidy) and here is a version I made of the above to manage many Bayesian models. Admittedly, Im not really sure how useful this is though. # CONDENSED MASTER TABLE VERSION ----------------------------------------------------------------------------- # Models table that has all models condensed models=tribble(~Model_name, ~model_descrip, ~model, &quot;Thesis_Model&quot;, &quot;Discount and PTS&quot;, Thesis_Model, &quot;discount_model&quot;, &quot;Discount variable only&quot;, discount_model, &quot;PTS_model&quot;, &quot;PTS variable only&quot;, PTS_model ) # Clean up work space #rm(DiscountPrior,Priors_MEmodel,Priors_Interactionmodel) # Grab and store all model info models=models %&gt;% mutate(prior_info=map(model,describe_prior), posterior_info=map(model, describe_posterior_fancy), model_performance=map(model,performance::performance) ) # DO NOT TRY AND VIEW THE TABLE IN A WINDOW!!!! RStan objects are so large they cause R to lock up # Call the model in the console instead #### summon individual model stats #### describe_prior(models$model[[1]]) #by specific model map(models$model,describe_prior) # do for all models at once # or all info for all models at once unnest(models,posterior_info) %&gt;% select(-c(model,prior_info,model_descrip)) 3.8 Turn row names into a column/variable Use the rownames() command to turn row names into a variable cars=rownames_to_column(mtcars, var = &quot;car&quot;) as_tibble(cars) ## # A tibble: 32 x 12 ## car mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4 Drive 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # ... with 22 more rows 3.9 How to edit/change column names TWO WAYS TO DO THIS: Use colnames() (for base R) or rename() (for tidyverse) colnames() pulls up all the column/variable names as a vector. If you want to actually change them, youll need to combine this command with something like the sub() or gsub() commands (for base R). Im going to skip this becauseits base R. To access and change the names faster via tidyverse, run use rename() rm(list=ls()) # clear R&#39;s memory iris %&gt;% rename(&quot;Sepal.blaahhhhhh&quot;=&quot;Sepal.Length&quot;) ## Sepal.blaahhhhhh Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica iris %&gt;% rename(&quot;hurr&quot;=&quot;Sepal.Length&quot;, &quot;durr&quot;=&quot;Sepal.Width&quot;, &quot;abcdefgh&quot;=&quot;Species&quot;) ## hurr durr Petal.Length Petal.Width abcdefgh ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica If you need to do some really fancy conditional renaming (e.g., changing all variables that start with r to start with rf instead, to make it more clear that the prefix actually stands for risk factor rather than reverse coded), youll need to use rename_with(). This command has two parts to it: the data set, and the function you wish to apply to it (which you put after the ~) rename_with(iris, ~ gsub(pattern = &quot;.&quot;, replacement = &quot;_&quot;, .x, fixed = TRUE)) ## Sepal_Length Sepal_Width Petal_Length Petal_Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica The gsub() function from Base R identifies matching patterns in the data and substitutes them with what you want instead. Think of it like a Find all and replace with function The above line thus does the following: 1. Checks the column names of the supplied data set (iris) for a specific pattern (pattern= ) 2. Replaces said pattern with your input (replacement= ) The great thing about rename_with() is that the .fn (or ~ shortcut) can take ANY function as input. For example, if you want to add a prefix or suffix to columns, you can change the function to: rename_with( iris, ~ paste0(.x, &quot;_text&quot;)) ## Sepal.Length_text Sepal.Width_text Petal.Length_text Petal.Width_text Species_text ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica The above line adds a suffix. You can also add a prefix in the exact same way, just by switching the order of the string and the pattern in the paste0 command Alternative method to the above This is a second way to do the above. It may appear more simple, but its also probably not as theoretically consistent with how the packages were made..it uses the {stringr} package to rename the column names, and {stringr} is typically for editing vectors of strings.. so it works, but its a little unconventional because you call and edit the column names like theyre a vector in a data set colnames(iris)=str_replace(colnames(iris), pattern = &quot;.&quot;, replacement = &quot;_&quot;) 3.10 Re-order columns in a data set Use relocate() to change column positions, using the same syntax as select() to make it easy to move blocks of columns at once. mtcars # notice the column order ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 mtcars %&gt;% relocate(hp, .before = mpg) ## hp mpg cyl disp drat wt qsec vs am gear carb ## Mazda RX4 110 21.0 6 160.0 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 110 21.0 6 160.0 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 93 22.8 4 108.0 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 110 21.4 6 258.0 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 175 18.7 8 360.0 3.15 3.440 17.02 0 0 3 2 ## Valiant 105 18.1 6 225.0 2.76 3.460 20.22 1 0 3 1 ## Duster 360 245 14.3 8 360.0 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 62 24.4 4 146.7 3.69 3.190 20.00 1 0 4 2 ## Merc 230 95 22.8 4 140.8 3.92 3.150 22.90 1 0 4 2 ## Merc 280 123 19.2 6 167.6 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 123 17.8 6 167.6 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 180 16.4 8 275.8 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 180 17.3 8 275.8 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 180 15.2 8 275.8 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 205 10.4 8 472.0 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 215 10.4 8 460.0 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 230 14.7 8 440.0 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 66 32.4 4 78.7 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 52 30.4 4 75.7 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 65 33.9 4 71.1 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 97 21.5 4 120.1 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 150 15.5 8 318.0 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 150 15.2 8 304.0 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 245 13.3 8 350.0 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 175 19.2 8 400.0 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 66 27.3 4 79.0 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 91 26.0 4 120.3 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 113 30.4 4 95.1 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 264 15.8 8 351.0 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 175 19.7 6 145.0 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 335 15.0 8 301.0 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 109 21.4 4 121.0 4.11 2.780 18.60 1 1 4 2 mtcars %&gt;% relocate(hp:wt, .after= am) ## mpg cyl disp qsec vs am hp drat wt gear carb ## Mazda RX4 21.0 6 160.0 16.46 0 1 110 3.90 2.620 4 4 ## Mazda RX4 Wag 21.0 6 160.0 17.02 0 1 110 3.90 2.875 4 4 ## Datsun 710 22.8 4 108.0 18.61 1 1 93 3.85 2.320 4 1 ## Hornet 4 Drive 21.4 6 258.0 19.44 1 0 110 3.08 3.215 3 1 ## Hornet Sportabout 18.7 8 360.0 17.02 0 0 175 3.15 3.440 3 2 ## Valiant 18.1 6 225.0 20.22 1 0 105 2.76 3.460 3 1 ## Duster 360 14.3 8 360.0 15.84 0 0 245 3.21 3.570 3 4 ## Merc 240D 24.4 4 146.7 20.00 1 0 62 3.69 3.190 4 2 ## Merc 230 22.8 4 140.8 22.90 1 0 95 3.92 3.150 4 2 ## Merc 280 19.2 6 167.6 18.30 1 0 123 3.92 3.440 4 4 ## Merc 280C 17.8 6 167.6 18.90 1 0 123 3.92 3.440 4 4 ## Merc 450SE 16.4 8 275.8 17.40 0 0 180 3.07 4.070 3 3 ## Merc 450SL 17.3 8 275.8 17.60 0 0 180 3.07 3.730 3 3 ## Merc 450SLC 15.2 8 275.8 18.00 0 0 180 3.07 3.780 3 3 ## Cadillac Fleetwood 10.4 8 472.0 17.98 0 0 205 2.93 5.250 3 4 ## Lincoln Continental 10.4 8 460.0 17.82 0 0 215 3.00 5.424 3 4 ## Chrysler Imperial 14.7 8 440.0 17.42 0 0 230 3.23 5.345 3 4 ## Fiat 128 32.4 4 78.7 19.47 1 1 66 4.08 2.200 4 1 ## Honda Civic 30.4 4 75.7 18.52 1 1 52 4.93 1.615 4 2 ## Toyota Corolla 33.9 4 71.1 19.90 1 1 65 4.22 1.835 4 1 ## Toyota Corona 21.5 4 120.1 20.01 1 0 97 3.70 2.465 3 1 ## Dodge Challenger 15.5 8 318.0 16.87 0 0 150 2.76 3.520 3 2 ## AMC Javelin 15.2 8 304.0 17.30 0 0 150 3.15 3.435 3 2 ## Camaro Z28 13.3 8 350.0 15.41 0 0 245 3.73 3.840 3 4 ## Pontiac Firebird 19.2 8 400.0 17.05 0 0 175 3.08 3.845 3 2 ## Fiat X1-9 27.3 4 79.0 18.90 1 1 66 4.08 1.935 4 1 ## Porsche 914-2 26.0 4 120.3 16.70 0 1 91 4.43 2.140 5 2 ## Lotus Europa 30.4 4 95.1 16.90 1 1 113 3.77 1.513 5 2 ## Ford Pantera L 15.8 8 351.0 14.50 0 1 264 4.22 3.170 5 4 ## Ferrari Dino 19.7 6 145.0 15.50 0 1 175 3.62 2.770 5 6 ## Maserati Bora 15.0 8 301.0 14.60 0 1 335 3.54 3.570 5 8 ## Volvo 142E 21.4 4 121.0 18.60 1 1 109 4.11 2.780 4 2 3.11 Working with date and time variables 3.11.1 Format date-and-time variables appropriate as date objects in R part_1$start_date=format(as.POSIXct(part_1$start_date,format=&#39;%Y-%m-%d %H:%M:%S&#39;),format=&#39;%m/%d/%Y&#39;) Note that the format part has to be EXACTLY as the format appears in the data. If you have an extra space in there or / instead of - separating the numbers, it will wipe the column out. Can also do the tidyverse way: full_data$start_date=lubridate::date(no_slice$start_date) 3.11.2 Find the difference between two dates/times difftime(part_1$end_date[1], part_2$end_date[1], units=&quot;days&quot;) "],["clean-data.html", "Chapter 4 Clean Data 4.1 Replace a value with NA 4.2 Replace NAs with a value 4.3 Identify columns or rows with Missing values 4.4 Find the percentage of a variable that is missing 4.5 Exclude Missing values from analysis", " Chapter 4 Clean Data 4.1 Replace a value with NA Use dplyr::na_if() if you have a value coded in your data (e.g., 999) that you want to convert to NA example_data=dplyr::tribble(~name, ~bday_month, &quot;Ryan&quot;, 10, &quot;Z&quot;, 3, &quot;Jen&quot;, 999, &quot;Tristin&quot;, 999, &quot;Cassidy&quot;, 6) example_data ## # A tibble: 5 x 2 ## name bday_month ## &lt;chr&gt; &lt;dbl&gt; ## 1 Ryan 10 ## 2 Z 3 ## 3 Jen 999 ## 4 Tristin 999 ## 5 Cassidy 6 example_data$bday_month=na_if(example_data$bday_month, 999) #example doing one column at a time example_data ## # A tibble: 5 x 2 ## name bday_month ## &lt;chr&gt; &lt;dbl&gt; ## 1 Ryan 10 ## 2 Z 3 ## 3 Jen NA ## 4 Tristin NA ## 5 Cassidy 6 example_data %&gt;% # can also pass the data to mutate and do it the tidyverse way mutate(bday_month=na_if(bday_month, 999)) ## # A tibble: 5 x 2 ## name bday_month ## &lt;chr&gt; &lt;dbl&gt; ## 1 Ryan 10 ## 2 Z 3 ## 3 Jen NA ## 4 Tristin NA ## 5 Cassidy 6 4.2 Replace NAs with a value tidyr::replace_na() is very useful if you have some NAs in your data and you want to fill them in with some value. example_data=tibble::tribble(~name, ~fav_color, ~fav_food, &quot;Ryan&quot;, &quot;green&quot;, &quot;Mexican&quot;, &quot;Cassidy&quot;, &quot;blue&quot;, NA, &quot;Z&quot;, NA, NA, &quot;Tristin&quot;, &quot;purple&quot;, NA, &quot;Tarika&quot;, NA, NA, &quot;Jen&quot;, NA, &quot;Italian&quot;) example_data ## # A tibble: 6 x 3 ## name fav_color fav_food ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Ryan green Mexican ## 2 Cassidy blue &lt;NA&gt; ## 3 Z &lt;NA&gt; &lt;NA&gt; ## 4 Tristin purple &lt;NA&gt; ## 5 Tarika &lt;NA&gt; &lt;NA&gt; ## 6 Jen &lt;NA&gt; Italian # replace NA&#39;s in one col tidyr::replace_na(example_data$fav_food, &quot;MISSING&quot;) ## [1] &quot;Mexican&quot; &quot;MISSING&quot; &quot;MISSING&quot; &quot;MISSING&quot; &quot;MISSING&quot; &quot;Italian&quot; # replace in multiple columns example_data %&gt;% mutate(across(c(fav_color, fav_food), replace_na, &quot;MISSING&quot;)) ## # A tibble: 6 x 3 ## name fav_color fav_food ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Ryan green Mexican ## 2 Cassidy blue MISSING ## 3 Z MISSING MISSING ## 4 Tristin purple MISSING ## 5 Tarika MISSING MISSING ## 6 Jen MISSING Italian 4.3 Identify columns or rows with Missing values is.na() is the base R way to identify, in a TRUE/FALSE manner, whether or not there are missing values in a vector y &lt;- c(1,2,3,NA) is.na(y) # returns a vector (F F F T) ## [1] FALSE FALSE FALSE TRUE 4.4 Find the percentage of a variable that is missing Sometimes necessary to check before conducting an analysis. This requires my package, legaldmlab ?legaldmlab::count_missing mtcars %&gt;% select(hp:drat) %&gt;% legaldmlab::count_missing() ## # A tibble: 2 x 3 ## variable missing_count percent_missing ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 hp 0 0.0% ## 2 drat 0 0.0% 4.5 Exclude Missing values from analysis "],["dropping-missing-values-from-the-data-set.html", "Chapter 5 Dropping Missing values from the data set", " Chapter 5 Dropping Missing values from the data set tidyr::drop_na() example_data=dplyr::tribble(~name, ~bday_month, ~car, &quot;Ryan&quot;, 10, &quot;kia&quot;, &quot;Z&quot;, NA, &quot;toyota&quot;, &quot;Jen&quot;, NA, NA, &quot;Tristin&quot;, 999, NA, &quot;Cassidy&quot;, 6, &quot;honda&quot;) example_data ## # A tibble: 5 x 3 ## name bday_month car ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Ryan 10 kia ## 2 Z NA toyota ## 3 Jen NA &lt;NA&gt; ## 4 Tristin 999 &lt;NA&gt; ## 5 Cassidy 6 honda example_data %&gt;% drop_na() # with nothing specified, it drops ALL variables that have &gt;=1 missing value ## # A tibble: 2 x 3 ## name bday_month car ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Ryan 10 kia ## 2 Cassidy 6 honda example_data %&gt;% drop_na(car) # drops only rows with values missing in the specified column ## # A tibble: 3 x 3 ## name bday_month car ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Ryan 10 kia ## 2 Z NA toyota ## 3 Cassidy 6 honda "],["working-with-factors.html", "Chapter 6 Working with Factors 6.1 Manually recode/change a factors levels 6.2 Collapse factor levels 6.3 Add levels to a factor 6.4 Drop unused levels 6.5 Change the order of a factors levels", " Chapter 6 Working with Factors 6.1 Manually recode/change a factors levels Use forcats::fct_recode() diamonds=diamonds %&gt;% as_tibble() diamonds$cut=fct_recode(diamonds$cut, &quot;meh&quot;=&quot;Fair&quot;, &quot;Wow&quot;=&quot;Premium&quot;) summary(diamonds$cut) ## meh Good Very Good Wow Ideal ## 1610 4906 12082 13791 21551 6.2 Collapse factor levels fct_collapse(dataset$variable, NewLevelA=c(OldLevel1,Oldlevel2), NewLevelB=c(OldLevel3)) print(&quot;temp&quot;) ## [1] &quot;temp&quot; 6.3 Add levels to a factor use fct_expand() print(&quot;temp&quot;) ## [1] &quot;temp&quot; 6.4 Drop unused levels Use fct_drop() print(&quot;temp&quot;) ## [1] &quot;temp&quot; 6.5 Change the order of a factors levels example_data=tribble(~person, ~condition, &quot;bob&quot;, &quot;25 years&quot;, &quot;jane&quot;, &quot;5 years&quot;, &quot;jim&quot;, &quot;5 years&quot;, &quot;john&quot;, &quot;25 years&quot;) example_data$condition=factor(example_data$condition) str(example_data$condition) ## Factor w/ 2 levels &quot;25 years&quot;,&quot;5 years&quot;: 1 2 2 1 example_data$condition =fct_relevel(example_data$condition, c(&quot;5 years&quot;, &quot;25 years&quot;)) str(example_data$condition) ## Factor w/ 2 levels &quot;5 years&quot;,&quot;25 years&quot;: 2 1 1 2 "],["working-with-strings.html", "Chapter 7 Working with Strings 7.1 Remove a pattern from a string 7.2 Replace one pattern in a string with another 7.3 Find (i.e., filter for) All instances of a string 7.4 Force all letters to lower case", " Chapter 7 Working with Strings 7.1 Remove a pattern from a string Tidyverse command: str_remove() library(rvest) ## Loading required package: xml2 ## ## Attaching package: &#39;rvest&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## pluck ## The following object is masked from &#39;package:readr&#39;: ## ## guess_encoding library(tidyverse) html=read_html(&#39;https://shop.tcgplayer.com/price-guide/pokemon/base-set&#39;) %&gt;% html_table(fill = TRUE) html ## [[1]] ## PRODUCT Rarity Number Market Price Listed Median ## 1 Abra Common 43 $0.59 $0.80 View ## 2 Alakazam Holo Rare 1 $31.63  View ## 3 Arcanine Uncommon 23 $2.61 $2.99 View ## 4 Beedrill Rare 17 $3.49 $3.00 View ## 5 Bill Common 91 $0.27 $0.49 View ## 6 Blastoise Holo Rare 2 $115.56  View ## 7 Bulbasaur Common 44 $1.89 $3.00 View ## 8 Caterpie Common 45 $0.83 $0.92 View ## 9 Chansey Holo Rare 3 $20.92  View ## 10 Charizard Holo Rare 4 $408.10  View ## 11 Charmander Common 46 $2.03 $2.70 View ## 12 Charmeleon Uncommon 24 $1.28 $2.08 View ## 13 Clefairy Holo Rare 5 $19.05  View ## 14 Clefairy Doll Rare 70 $3.07 $3.34 View ## 15 Computer Search Rare 71 $2.22 $4.38 View ## 16 Defender Uncommon 80 $1.23 $1.44 View ## 17 Devolution Spray Rare 72 $2.63 $2.67 View ## 18 Dewgong Uncommon 25 $1.86 $2.26 View ## 19 Diglett Common 47 $0.40 $0.68 View ## 20 Doduo Common 48 $0.87 $1.09 View ## 21 Double Colorless Energy Uncommon 96 $4.04 $4.35 View ## 22 Dragonair Rare 18 $9.30 $9.21 View ## 23 Dratini Uncommon 26 $1.52 $1.53 View ## 24 Drowzee Common 49 $0.59 $0.75 View ## 25 Dugtrio Rare 19 $4.39 $5.13 View ## 26 Electabuzz Rare 20 $5.53 $6.90 View ## 27 Electrode Rare 21 $4.90 $4.72 View ## 28 Energy Removal Common 92 $0.39 $0.50 View ## 29 Energy Retrieval Uncommon 81 $0.53 $0.73 View ## 30 Farfetch&#39;d Uncommon 27 $1.19 $1.24 View ## 31 Fighting Energy Common 97 $0.28 $0.36 View ## 32 Fire Energy Common 98 $0.30 $0.46 View ## 33 Full Heal Uncommon 82 $0.93 $1.06 View ## 34 Gastly Common 50 $0.56 $0.85 View ## 35 Grass Energy Common 99 $0.26 $0.34 View ## 36 Growlithe Uncommon 28 $0.91 $1.05 View ## 37 Gust of Wind Common 93 $0.32 $0.47 View ## 38 Gyarados Holo Rare 6 $21.54  View ## 39 Haunter Uncommon 29 $1.46 $1.96 View ## 40 Hitmonchan Holo Rare 7 $15.43  View ## 41 Imposter Professor Oak Rare 73 $2.95 $3.50 View ## 42 Item Finder Rare 74 $9.76 $9.95 View ## 43 Ivysaur Uncommon 30 $2.33 $3.40 View ## 44 Jynx Uncommon 31 $0.71 $0.99 View ## 45 Kadabra Uncommon 32 $2.59 $2.75 View ## 46 Kakuna Uncommon 33 $0.75 $1.02 View ## 47 Koffing Common 51 $0.44 $0.60 View ## 48 Lass Rare 75 $2.41 $2.75 View ## 49 Lightning Energy Common 100 $0.29 $0.50 View ## 50 Machoke Uncommon 34 $0.63 $0.91 View ## 51 Machop Common 52 $0.32 $0.49 View ## 52 Magikarp Uncommon 35 $1.45 $1.60 View ## 53 Magmar Uncommon 36 $1.95 $2.03 View ## 54 Magnemite Common 53 $0.46 $0.65 View ## 55 Magneton Holo Rare 9 $19.72  View ## 56 Maintenance Uncommon 83 $2.17 $1.99 View ## 57 Metapod Common 54 $0.79 $1.00 View ## 58 Mewtwo Holo Rare 10 $30.23  View ## 59 Nidoking Holo Rare 11 $21.58  View ## 60 Nidoran M Common 55 $0.47 $0.65 View ## 61 Nidorino Uncommon 37 $2.06 $2.03 View ## 62 Ninetales Holo Rare 12 $16.91  View ## 63 Onix Common 56 $0.36 $0.64 View ## 64 Pidgeotto Rare 22 $5.20 $5.95 View ## 65 Pidgey Common 57 $0.91 $1.11 View ## 66 Pikachu Common 58 $4.33 $4.42 View ## 67 PlusPower Uncommon 84 $0.76 $0.97 View ## 68 Pokedex Uncommon 87 $0.49 $0.59 View ## 69 Pokemon Breeder Rare 76 $5.22 $5.22 View ## 70 Pokemon Center Uncommon 85 $1.85 $1.85 View ## 71 Pokemon Flute Uncommon 86 $1.65 $2.00 View ## 72 Pokemon Trader Rare 77 $3.30 $3.99 View ## 73 Poliwag Common 59 $0.43 $0.60 View ## 74 Poliwhirl Uncommon 38 $1.03 $1.28 View ## 75 Poliwrath Holo Rare 13 $13.44  View ## 76 Ponyta Common 60 $0.48 $0.50 View ## 77 Porygon Uncommon 39 $2.24 $2.89 View ## 78 Potion Common 94 $0.19 $0.26 View ## 79 Professor Oak Uncommon 88 $1.65 $2.23 View ## 80 Psychic Energy Common 101 $0.28 $0.50 View ## 81 Raichu Holo Rare 14 $31.90  View ## 82 Raticate Uncommon 40 $2.94 $2.75 View ## 83 Rattata Common 61 $0.59 $0.67 View ## 84 Revive Uncommon 89 $2.29 $2.56 View ## 85 Sandshrew Common 62 $0.32 $0.75 View ## 86 Scoop Up Rare 78 $6.60 $7.28 View ## 87 Seel Uncommon 41 $0.83 $1.36 View ## 88 Squirtle Common 63 $3.80 $4.91 View ## 89 Starmie Common 64 $0.44 $0.70 View ## 90 Staryu Common 65 $0.40 $0.52 View ## 91 Super Energy Removal Rare 79 $3.64 $3.99 View ## 92 Super Potion Uncommon 90 $0.28 $0.35 View ## 93 Switch Common 95 $0.33 $0.45 View ## 94 Tangela Common 66 $0.53 $0.64 View ## 95 Venusaur Holo Rare 15 $93.62  View ## 96 Voltorb Common 67 $1.66 $1.69 View ## 97 Vulpix Common 68 $0.70 $0.88 View ## 98 Wartortle Uncommon 42 $2.99 $3.00 View ## 99 Water Energy Common 102 $0.37 $0.50 View ## 100 Weedle Common 69 $0.40 $0.65 View ## 101 Zapdos Holo Rare 16 $24.28  View # Saved as a list by default. Now extract your table from said list html=as_tibble(html[[1]] %&gt;% # find out which number it is in the list select(&#39;PRODUCT&#39;,&#39;Rarity&#39;,&#39;Number&#39;,&#39;Market Price&#39;)) # if needed, specify which columns you want too html ## # A tibble: 101 x 4 ## PRODUCT Rarity Number `Market Price` ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 Abra Common 43 $0.59 ## 2 Alakazam Holo Rare 1 $31.63 ## 3 Arcanine Uncommon 23 $2.61 ## 4 Beedrill Rare 17 $3.49 ## 5 Bill Common 91 $0.27 ## 6 Blastoise Holo Rare 2 $115.56 ## 7 Bulbasaur Common 44 $1.89 ## 8 Caterpie Common 45 $0.83 ## 9 Chansey Holo Rare 3 $20.92 ## 10 Charizard Holo Rare 4 $408.10 ## # ... with 91 more rows # BASE R METHOD (sub by replacing something with nothing) gsub(&#39;\\\\$&#39;,&#39;&#39;,html$`Market Price`) #(what you&#39;re looking for, replace with, from where) ## [1] &quot;0.59&quot; &quot;31.63&quot; &quot;2.61&quot; &quot;3.49&quot; &quot;0.27&quot; &quot;115.56&quot; &quot;1.89&quot; &quot;0.83&quot; &quot;20.92&quot; &quot;408.10&quot; &quot;2.03&quot; &quot;1.28&quot; &quot;19.05&quot; &quot;3.07&quot; &quot;2.22&quot; ## [16] &quot;1.23&quot; &quot;2.63&quot; &quot;1.86&quot; &quot;0.40&quot; &quot;0.87&quot; &quot;4.04&quot; &quot;9.30&quot; &quot;1.52&quot; &quot;0.59&quot; &quot;4.39&quot; &quot;5.53&quot; &quot;4.90&quot; &quot;0.39&quot; &quot;0.53&quot; &quot;1.19&quot; ## [31] &quot;0.28&quot; &quot;0.30&quot; &quot;0.93&quot; &quot;0.56&quot; &quot;0.26&quot; &quot;0.91&quot; &quot;0.32&quot; &quot;21.54&quot; &quot;1.46&quot; &quot;15.43&quot; &quot;2.95&quot; &quot;9.76&quot; &quot;2.33&quot; &quot;0.71&quot; &quot;2.59&quot; ## [46] &quot;0.75&quot; &quot;0.44&quot; &quot;2.41&quot; &quot;0.29&quot; &quot;0.63&quot; &quot;0.32&quot; &quot;1.45&quot; &quot;1.95&quot; &quot;0.46&quot; &quot;19.72&quot; &quot;2.17&quot; &quot;0.79&quot; &quot;30.23&quot; &quot;21.58&quot; &quot;0.47&quot; ## [61] &quot;2.06&quot; &quot;16.91&quot; &quot;0.36&quot; &quot;5.20&quot; &quot;0.91&quot; &quot;4.33&quot; &quot;0.76&quot; &quot;0.49&quot; &quot;5.22&quot; &quot;1.85&quot; &quot;1.65&quot; &quot;3.30&quot; &quot;0.43&quot; &quot;1.03&quot; &quot;13.44&quot; ## [76] &quot;0.48&quot; &quot;2.24&quot; &quot;0.19&quot; &quot;1.65&quot; &quot;0.28&quot; &quot;31.90&quot; &quot;2.94&quot; &quot;0.59&quot; &quot;2.29&quot; &quot;0.32&quot; &quot;6.60&quot; &quot;0.83&quot; &quot;3.80&quot; &quot;0.44&quot; &quot;0.40&quot; ## [91] &quot;3.64&quot; &quot;0.28&quot; &quot;0.33&quot; &quot;0.53&quot; &quot;93.62&quot; &quot;1.66&quot; &quot;0.70&quot; &quot;2.99&quot; &quot;0.37&quot; &quot;0.40&quot; &quot;24.28&quot; # TIDYVERSE METHOD (just remove) str_remove(html$`Market Price`, pattern = &quot;\\\\$&quot;) ## [1] &quot;0.59&quot; &quot;31.63&quot; &quot;2.61&quot; &quot;3.49&quot; &quot;0.27&quot; &quot;115.56&quot; &quot;1.89&quot; &quot;0.83&quot; &quot;20.92&quot; &quot;408.10&quot; &quot;2.03&quot; &quot;1.28&quot; &quot;19.05&quot; &quot;3.07&quot; &quot;2.22&quot; ## [16] &quot;1.23&quot; &quot;2.63&quot; &quot;1.86&quot; &quot;0.40&quot; &quot;0.87&quot; &quot;4.04&quot; &quot;9.30&quot; &quot;1.52&quot; &quot;0.59&quot; &quot;4.39&quot; &quot;5.53&quot; &quot;4.90&quot; &quot;0.39&quot; &quot;0.53&quot; &quot;1.19&quot; ## [31] &quot;0.28&quot; &quot;0.30&quot; &quot;0.93&quot; &quot;0.56&quot; &quot;0.26&quot; &quot;0.91&quot; &quot;0.32&quot; &quot;21.54&quot; &quot;1.46&quot; &quot;15.43&quot; &quot;2.95&quot; &quot;9.76&quot; &quot;2.33&quot; &quot;0.71&quot; &quot;2.59&quot; ## [46] &quot;0.75&quot; &quot;0.44&quot; &quot;2.41&quot; &quot;0.29&quot; &quot;0.63&quot; &quot;0.32&quot; &quot;1.45&quot; &quot;1.95&quot; &quot;0.46&quot; &quot;19.72&quot; &quot;2.17&quot; &quot;0.79&quot; &quot;30.23&quot; &quot;21.58&quot; &quot;0.47&quot; ## [61] &quot;2.06&quot; &quot;16.91&quot; &quot;0.36&quot; &quot;5.20&quot; &quot;0.91&quot; &quot;4.33&quot; &quot;0.76&quot; &quot;0.49&quot; &quot;5.22&quot; &quot;1.85&quot; &quot;1.65&quot; &quot;3.30&quot; &quot;0.43&quot; &quot;1.03&quot; &quot;13.44&quot; ## [76] &quot;0.48&quot; &quot;2.24&quot; &quot;0.19&quot; &quot;1.65&quot; &quot;0.28&quot; &quot;31.90&quot; &quot;2.94&quot; &quot;0.59&quot; &quot;2.29&quot; &quot;0.32&quot; &quot;6.60&quot; &quot;0.83&quot; &quot;3.80&quot; &quot;0.44&quot; &quot;0.40&quot; ## [91] &quot;3.64&quot; &quot;0.28&quot; &quot;0.33&quot; &quot;0.53&quot; &quot;93.62&quot; &quot;1.66&quot; &quot;0.70&quot; &quot;2.99&quot; &quot;0.37&quot; &quot;0.40&quot; &quot;24.28&quot; 7.2 Replace one pattern in a string with another Tidyverse command: str_replace() Base R command: gsub() print(&quot;hello&quot;) ## [1] &quot;hello&quot; 7.3 Find (i.e., filter for) All instances of a string Useful for finding very specific things inside a column (e.g., one particular persons name in a roster of names; everyone with a particular last name) Tidyverse command: str_detect() Base R command: grepl() Note both must be nested inside of filter() mtcars=rownames_to_column(mtcars, var = &quot;car&quot;) mtcars %&gt;% filter(str_detect(car,&quot;Firebird&quot;)) 7.4 Force all letters to lower case Use str_to_lower() blah=tribble(~A, ~B, &quot;A&quot;,&quot;X&quot;, &quot;A&quot;,&quot;X&quot;) blah ## # A tibble: 2 x 2 ## A B ## &lt;chr&gt; &lt;chr&gt; ## 1 A X ## 2 A X blah$A=str_to_lower(blah$A) blah ## # A tibble: 2 x 2 ## A B ## &lt;chr&gt; &lt;chr&gt; ## 1 a X ## 2 a X "],["figures-and-graphs.html", "Chapter 8 Figures and Graphs 8.1 Commands for graph types 8.2 Highlight specific points 8.3 Add labels to data points 8.4 Plotting multiple graphs at once 8.5 Change the colors (bars; columns; dots; etc.) 8.6 Other aesthetic mappings 8.7 Adding and Customizing Text 8.8 Remove gridlines 8.9 Faceting 8.10 Log transformations 8.11 Changing the scale of the axis 8.12 Add a regression line", " Chapter 8 Figures and Graphs There are three parts to a ggplot2 call: 1. data 2. aesthetic mapping 3. Layer There is no piping involved in ggplot. You simply invoke ggplot, and tell it what they dataset is. Then you specify the aesthetics, and then the mapping. Lastly, include other optional stuff (e.g.Â expanded y-axis scale; titles and legends; etc.) Every single plot has the exact same layout that ONLY USES the above three points: ggplot(dataframe, aes(graph dimensions and variables used)) + geom_GraphType(specific graph controls) ## OR ## ggplot(dataframe) + geom_GraphType(aes(graph dimensions and variables used), specific graph controls) # mapping= aes() can go in either spot Then if you have other stuff you want to add on top of this, like axis labels, annotations, highlights, etc., you keep adding those in separate lines 8.1 Commands for graph types Graph Type Geom command Scatter geom_point() Line geom_line() Box geom_boxplot() Bar geom_bar() Column geom_col() Histogram geom_histogram() Density curve geom_density() Note that bar and column graphs look identical at first glance, but they serve two different purposes. Bar graphs are for frequency counts, and thus only take an X-axis variable; Column graphs are for showing the relationship between two variables X and Y, and display the values in the data # heihgt of bars is a frequency count of each level of the X variable cut bar_plot=ggplot(diamonds, aes(x=cut)) + geom_bar()+ theme_classic() # height of bars represents relationship between price and cut col_plot=ggplot(diamonds, aes(x=cut, y=price)) + geom_col()+ theme_classic() see::plots(bar_plot, col_plot, n_columns = 2, tags = c(&quot;Bar&quot;, &quot;Column&quot;)) 8.2 Highlight specific points The gghighlight package is great for this # example 1 ggplot(mtcars, aes(x= mpg, y=hp))+ geom_point()+ theme_classic()+ ggrepel::geom_text_repel(data = mtcars, aes(label = hp))+ # add data labels (optional) gghighlight::gghighlight(hp &gt; 200) # add highlights, according to some criteria # example 2 diamonds_abr=diamonds %&gt;% slice(1:100) ggplot(diamonds_abr, aes(x= cut, y= price, colour=price))+ geom_point()+ theme_classic()+ ggrepel::geom_text_repel(data = diamonds_abr, aes(label = price))+ # this line labels gghighlight::gghighlight(cut %in% c(&quot;Very Good&quot;, &quot;Ideal&quot;)) #this line highlights 8.3 Add labels to data points ggplot(mtcars, aes(x= mpg, y=hp))+ geom_point()+ theme_classic()+ ggrepel::geom_text_repel(data = mtcars, aes(label = hp)) ggplot(mtcars, aes(x= mpg, y=hp))+ geom_point() + geom_text(aes(label=hp, hjust=2.5, vjust=2.5)) geom_label(aes(label = scales::comma(n)), size = 2.5, nudge_y = 6) ## mapping: label = ~scales::comma(n) ## geom_label: parse = FALSE, label.padding = 0.25, label.r = 0.15, label.size = 0.25, na.rm = FALSE ## stat_identity: na.rm = FALSE ## position_nudge 8.4 Plotting multiple graphs at once see::plots() is good for this. print(&quot;temp&quot;) ## [1] &quot;temp&quot; 8.5 Change the colors (bars; columns; dots; etc.) This can be done in at least two different ways, depending on your goal. If you want to add color and make all of the (bars; dots; lines; etc.) the same color, than that is a graph-wide control and needs to be put in geom_point(). This manually sets the color for the whole graph. # add a color scale to the dots ggplot(mtcars, aes(x= mpg, y=hp))+ geom_point(color=&quot;blue&quot;) If you want to add color that changes according to a variable (e.g., by factor level), then the color needs to be specified as a variable name, in the aes mapping with the other variables. ggplot(mtcars, aes(x= mpg, y=hp, color=cyl))+ geom_point() 8.5.1 Fine-tuning colors You can change the spectrum of colors to specific colors if you want. Useful for example, when making graphs for APLS presentations; you can change the colors to be Montclair State University themed. The two commands for this are EITHER scale_fill_manual() or scale_color_manual(): Use the former for box, bar, violin, etc. plots; and the latter for line and plot graphs # Set colors manually ggplot(mtcars, aes(factor(gear), fill=factor(carb)))+ geom_bar() + scale_fill_manual(values=c(&quot;green&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;red&quot;, &quot;purple&quot;, &quot;blue&quot;)) ggplot(mtcars, aes(x = wt, y = mpg, color=as.factor(cyl)))+ geom_point() + scale_color_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) # Use color scales from a package library(gameofthrones) # NOTICE THAT scale_fill AND scale_color STILL APPLY TO THEIR RESPECTIVE GRAPH TYPES # bar graphs ggplot(mtcars, aes(factor(gear), fill=factor(carb)))+ geom_bar() + scale_fill_got(discrete = TRUE, option = &quot;Tully&quot;) ggplot(mtcars, aes(factor(cyl), fill=factor(vs)))+ geom_bar() + scale_fill_got(discrete = TRUE, option = &quot;Daenerys&quot;) # plot graph ggplot(mtcars, aes(x = mpg, y = disp, colour = hp))+ geom_point(size = 2) + scale_colour_got(option = &quot;Lannister&quot;) Fill graphs also come with an extra option: Setting the outline color. You can change the outline of the bar/column/etc. by specifying the color inside geom_() # change only the fill of the bars ggplot(mtcars, aes(factor(gear), fill=factor(carb)))+ geom_bar() # Change the outline of the bars by adding color inside the geom_bar() command ggplot(mtcars, aes(factor(gear), fill=factor(carb)))+ geom_bar(color=&quot;black&quot;) 8.5.2 More options See this link for setting color gradients for continuous variables, or using other custom color palattes like the gameofthrones package. 8.6 Other aesthetic mappings shape() controls the shapes on the graph alpha() controls transparency size() controls size Note again that if you want it to change by variable, it goes INSIDE aes(); but if you want to set it manually for the whole graph, it goes in geom_x() # shape ggplot(mtcars, aes(x= mpg, y=hp, shape=as.factor(cyl)))+ geom_point() ggplot(mtcars, aes(x= mpg, y=hp))+ geom_point(shape=23) # transparency ggplot(mtcars, aes(x= mpg, y=hp, alpha=hp))+ geom_point() # size ggplot(mtcars, aes(x= mpg, y=hp, size=cyl))+ geom_point() 8.7 Adding and Customizing Text 8.7.1 Add a title, axis labels, and captions Titles and axis labels are added via labs(). ggplot(mtcars, aes(x=cyl))+ geom_bar(colour=&quot;gray&quot;, fill=&quot;lightgreen&quot;)+ labs(title = &quot;Ages of Survey Respondants by Group&quot;, x=&quot;Age Group&quot;, caption=&quot;Note. Younger= ages 11-29; Older= ages 30-86.&quot;) 8.7.2 Center graph title Add the line theme(plot.title = element_text(hjust = 0.5)) ggplot(mtcars, aes(x=cyl))+ geom_bar(colour=&quot;gray&quot;, fill=&quot;lightgreen&quot;)+ labs(title = &quot;Ages of Survey Respondants by Group&quot;, x=&quot;Age Group&quot;, caption=&quot;Note. Younger= ages 11-29; Older= ages 30-86.&quot;)+ theme(plot.title = element_text(hjust = 0.5)) 8.7.3 Use different fonts See tutorial on this web page Or, use the extrafont package, and set everything using the theme() command. # Visualize new groups library(extrafont) loadfonts(device=&quot;win&quot;) ggplot(mtcars, aes(x=cyl))+ geom_bar(colour=&quot;gray&quot;, fill=&quot;lightgreen&quot;)+ labs(title = &quot;Ages of Survey Respondants by Group&quot;, x=&quot;Age Group&quot;, caption=&quot;Note. Younger= ages 11-29; Older= ages 30-86.&quot;)+ theme(plot.title = element_text(hjust = 0.5))+ theme(axis.title = element_text(face = &quot;bold&quot;, family = &quot;Courier New&quot;, size = 12), axis.text = element_text(face = &quot;italic&quot;), plot.caption = element_text(face = &quot;italic&quot;, family = &quot;Calibri&quot;, size = 9), plot.title = element_text(face = &quot;bold&quot;,size = 14, family = &quot;Courier New&quot;)) 8.8 Remove gridlines Add theme(panel.grid = element_blank()) ggplot(mtcars, aes(x=cyl))+ geom_bar(colour=&quot;gray&quot;, fill=&quot;lightgreen&quot;)+ labs(title = &quot;Ages of Survey Respondants by Group&quot;, x=&quot;Age Group&quot;, caption=&quot;Note. Younger= ages 11-29; Older= ages 30-86.&quot;)+ theme(plot.title = element_text(hjust = 0.5))+ theme(axis.title = element_text(face = &quot;bold&quot;, family = &quot;Courier New&quot;, size = 12), axis.text = element_text(face = &quot;italic&quot;), plot.caption = element_text(face = &quot;italic&quot;, family = &quot;Calibri&quot;, size = 9), plot.title = element_text(face = &quot;bold&quot;,size = 14, family = &quot;Courier New&quot;))+ theme(panel.grid = element_blank()) 8.9 Faceting This is dividing one plot into subplots, in order to communicate relationships better. Again, this is just a single extra command, this time at the end of the code: facet_wrap(~columnhead) The tilde sign in R means by, as in divide (something) by this print(&quot;temp&quot;) This line produces a graph of population and life expectency, breaking it down to make a separate graph per each continent 8.10 Log transformations Sometimes when your data is really squished together on a graph it is hard to read. In this case, log transformations are really helpful, to change the scale of the data. For example, by multiplying all your points by 10x To create a log transformation of the same scatter plot above, add one extra bit: scale_x_log10() print(&quot;temp&quot;) You can also make both axis be logged by adding +scale again for y 8.11 Changing the scale of the axis Add coord_cartesian(xlim = c(lower,upper)) print(&quot;temp&quot;) ## [1] &quot;temp&quot; 8.12 Add a regression line Add the line geom_smooth(method = \"lm\", formula = y ~ x) ggplot(mtcars, aes(x= mpg, y=hp, color=mpg))+ geom_point()+ geom_smooth(method = &quot;lm&quot;, formula = y ~ x) "],["making-tables-with-flextable.html", "Chapter 9 Making Tables with flextable 9.1 APA Table Components 9.2 Indent values 9.3 Add a Horizontal border 9.4 Change font and font size 9.5 Grouped table 9.6 Complete Example", " Chapter 9 Making Tables with flextable NOTES: - j refers to the column - i refers to the row number 9.1 APA Table Components 9.2 Indent values https://davidgohel.github.io/flextable/reference/padding.html https://stackoverflow.com/questions/64134725/indentation-in-the-first-column-of-a-flextable-object Use the padding function: ft &lt;- padding(ft, i=2, j=1, padding.left=20) 9.3 Add a Horizontal border hline(., i=4, j=1:2, part = &quot;body&quot;) 9.4 Change font and font size glm_table&lt;-flextable::font(glm_table,part = &quot;all&quot;, fontname = &quot;Times&quot;) # Font glm_table &lt;-flextable::fontsize(glm_table, size = 11, part = &quot;all&quot;) # Font size 9.5 Grouped table cars=rownames_to_column(mtcars, var = &quot;Model&quot;) test=flextable::as_grouped_data(x=cars, groups = c(&quot;cyl&quot;)) 9.6 Complete Example "],["misc-stuff.html", "Chapter 10 Misc. Stuff 10.1 Scrape web pages for data tables 10.2 Read SPSS files into R 10.3 Turn numbers into percentages 10.4 Find all possible combindations of items in a vector 10.5 Download files from the internet 10.6 Print multiple things in one statement", " Chapter 10 Misc. Stuff 10.1 Scrape web pages for data tables See Chapter 10s example purrr walk through for a guide on how to scrape multiple web tables simultaneously Simple example library(rvest) library(tidyverse) html=read_html(&#39;https://shop.tcgplayer.com/price-guide/pokemon/base-set&#39;) %&gt;% html_table(fill = TRUE) html ## [[1]] ## PRODUCT Rarity Number Market Price Listed Median ## 1 Abra Common 43 $0.59 $0.80 View ## 2 Alakazam Holo Rare 1 $31.63  View ## 3 Arcanine Uncommon 23 $2.61 $2.99 View ## 4 Beedrill Rare 17 $3.49 $3.00 View ## 5 Bill Common 91 $0.27 $0.49 View ## 6 Blastoise Holo Rare 2 $115.56  View ## 7 Bulbasaur Common 44 $1.89 $3.00 View ## 8 Caterpie Common 45 $0.83 $0.92 View ## 9 Chansey Holo Rare 3 $20.92  View ## 10 Charizard Holo Rare 4 $408.10  View ## 11 Charmander Common 46 $2.03 $2.70 View ## 12 Charmeleon Uncommon 24 $1.28 $2.08 View ## 13 Clefairy Holo Rare 5 $19.05  View ## 14 Clefairy Doll Rare 70 $3.07 $3.34 View ## 15 Computer Search Rare 71 $2.22 $4.38 View ## 16 Defender Uncommon 80 $1.23 $1.44 View ## 17 Devolution Spray Rare 72 $2.63 $2.67 View ## 18 Dewgong Uncommon 25 $1.86 $2.26 View ## 19 Diglett Common 47 $0.40 $0.68 View ## 20 Doduo Common 48 $0.87 $1.09 View ## 21 Double Colorless Energy Uncommon 96 $4.04 $4.35 View ## 22 Dragonair Rare 18 $9.30 $9.21 View ## 23 Dratini Uncommon 26 $1.52 $1.53 View ## 24 Drowzee Common 49 $0.59 $0.75 View ## 25 Dugtrio Rare 19 $4.39 $5.13 View ## 26 Electabuzz Rare 20 $5.53 $6.90 View ## 27 Electrode Rare 21 $4.90 $4.72 View ## 28 Energy Removal Common 92 $0.39 $0.50 View ## 29 Energy Retrieval Uncommon 81 $0.53 $0.73 View ## 30 Farfetch&#39;d Uncommon 27 $1.19 $1.24 View ## 31 Fighting Energy Common 97 $0.28 $0.36 View ## 32 Fire Energy Common 98 $0.30 $0.46 View ## 33 Full Heal Uncommon 82 $0.93 $1.06 View ## 34 Gastly Common 50 $0.56 $0.85 View ## 35 Grass Energy Common 99 $0.26 $0.34 View ## 36 Growlithe Uncommon 28 $0.91 $1.05 View ## 37 Gust of Wind Common 93 $0.32 $0.47 View ## 38 Gyarados Holo Rare 6 $21.54  View ## 39 Haunter Uncommon 29 $1.46 $1.96 View ## 40 Hitmonchan Holo Rare 7 $15.43  View ## 41 Imposter Professor Oak Rare 73 $2.95 $3.50 View ## 42 Item Finder Rare 74 $9.76 $9.95 View ## 43 Ivysaur Uncommon 30 $2.33 $3.40 View ## 44 Jynx Uncommon 31 $0.71 $0.99 View ## 45 Kadabra Uncommon 32 $2.59 $2.75 View ## 46 Kakuna Uncommon 33 $0.75 $1.02 View ## 47 Koffing Common 51 $0.44 $0.60 View ## 48 Lass Rare 75 $2.41 $2.75 View ## 49 Lightning Energy Common 100 $0.29 $0.50 View ## 50 Machoke Uncommon 34 $0.63 $0.91 View ## 51 Machop Common 52 $0.32 $0.49 View ## 52 Magikarp Uncommon 35 $1.45 $1.60 View ## 53 Magmar Uncommon 36 $1.95 $2.03 View ## 54 Magnemite Common 53 $0.46 $0.65 View ## 55 Magneton Holo Rare 9 $19.72  View ## 56 Maintenance Uncommon 83 $2.17 $1.99 View ## 57 Metapod Common 54 $0.79 $1.00 View ## 58 Mewtwo Holo Rare 10 $30.23  View ## 59 Nidoking Holo Rare 11 $21.58  View ## 60 Nidoran M Common 55 $0.47 $0.65 View ## 61 Nidorino Uncommon 37 $2.06 $2.03 View ## 62 Ninetales Holo Rare 12 $16.91  View ## 63 Onix Common 56 $0.36 $0.64 View ## 64 Pidgeotto Rare 22 $5.20 $5.95 View ## 65 Pidgey Common 57 $0.91 $1.11 View ## 66 Pikachu Common 58 $4.33 $4.42 View ## 67 PlusPower Uncommon 84 $0.76 $0.97 View ## 68 Pokedex Uncommon 87 $0.49 $0.59 View ## 69 Pokemon Breeder Rare 76 $5.22 $5.22 View ## 70 Pokemon Center Uncommon 85 $1.85 $1.85 View ## 71 Pokemon Flute Uncommon 86 $1.65 $2.00 View ## 72 Pokemon Trader Rare 77 $3.30 $3.99 View ## 73 Poliwag Common 59 $0.43 $0.60 View ## 74 Poliwhirl Uncommon 38 $1.03 $1.28 View ## 75 Poliwrath Holo Rare 13 $13.44  View ## 76 Ponyta Common 60 $0.48 $0.50 View ## 77 Porygon Uncommon 39 $2.24 $2.89 View ## 78 Potion Common 94 $0.19 $0.26 View ## 79 Professor Oak Uncommon 88 $1.65 $2.23 View ## 80 Psychic Energy Common 101 $0.28 $0.50 View ## 81 Raichu Holo Rare 14 $31.90  View ## 82 Raticate Uncommon 40 $2.94 $2.75 View ## 83 Rattata Common 61 $0.59 $0.67 View ## 84 Revive Uncommon 89 $2.29 $2.56 View ## 85 Sandshrew Common 62 $0.32 $0.75 View ## 86 Scoop Up Rare 78 $6.60 $7.28 View ## 87 Seel Uncommon 41 $0.83 $1.36 View ## 88 Squirtle Common 63 $3.80 $4.91 View ## 89 Starmie Common 64 $0.44 $0.70 View ## 90 Staryu Common 65 $0.40 $0.52 View ## 91 Super Energy Removal Rare 79 $3.64 $3.99 View ## 92 Super Potion Uncommon 90 $0.28 $0.35 View ## 93 Switch Common 95 $0.33 $0.45 View ## 94 Tangela Common 66 $0.53 $0.64 View ## 95 Venusaur Holo Rare 15 $93.62  View ## 96 Voltorb Common 67 $1.66 $1.69 View ## 97 Vulpix Common 68 $0.70 $0.88 View ## 98 Wartortle Uncommon 42 $2.99 $3.00 View ## 99 Water Energy Common 102 $0.37 $0.50 View ## 100 Weedle Common 69 $0.40 $0.65 View ## 101 Zapdos Holo Rare 16 $24.28  View # Saved as a list by default. Now extract your table from said list html=as_tibble(html[[1]] %&gt;% # find out which number it is in the list select(&#39;PRODUCT&#39;,&#39;Rarity&#39;,&#39;Number&#39;,&#39;Market Price&#39;)) # if needed, specify which columns you want too html ## # A tibble: 101 x 4 ## PRODUCT Rarity Number `Market Price` ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 Abra Common 43 $0.59 ## 2 Alakazam Holo Rare 1 $31.63 ## 3 Arcanine Uncommon 23 $2.61 ## 4 Beedrill Rare 17 $3.49 ## 5 Bill Common 91 $0.27 ## 6 Blastoise Holo Rare 2 $115.56 ## 7 Bulbasaur Common 44 $1.89 ## 8 Caterpie Common 45 $0.83 ## 9 Chansey Holo Rare 3 $20.92 ## 10 Charizard Holo Rare 4 $408.10 ## # ... with 91 more rows # remove $ symbol in Price column to make it easier to work with html$`Market Price`=str_remove(html$`Market Price`, pattern = &quot;\\\\$&quot;) html=html %&gt;% mutate(`Market Price`=as.numeric(`Market Price`)) # convert from string to numeric # view finished table head(html) ## # A tibble: 6 x 4 ## PRODUCT Rarity Number `Market Price` ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Abra Common 43 0.59 ## 2 Alakazam Holo Rare 1 31.6 ## 3 Arcanine Uncommon 23 2.61 ## 4 Beedrill Rare 17 3.49 ## 5 Bill Common 91 0.27 ## 6 Blastoise Holo Rare 2 116. Slightly more complicated example pacman::p_load(rvest, tidyverse) exonerations_table=read_html(&quot;https://www.law.umich.edu/special/exoneration/Pages/detaillist.aspx&quot;) %&gt;% html_nodes(&quot;table.ms-listviewtable&quot;) %&gt;% html_table(fill=TRUE, header = TRUE) From here you now need to clean up the table !(a pic)[/pics/scrape.png] knitr::include_graphics(&quot;pics/scrape.png&quot;) exonerations_table=as.data.frame(exonerations_table) # turn into a df # save the names to a vector table_names=exonerations_table$Last.Name[1:20] # Trim out the garbage rows and columns exonerations_table=exonerations_table %&gt;% select(Last.Name:Tags.1) %&gt;% slice(22:n()) # over-write incorrect col names with the vector of correct ones we saved above colnames(exonerations_table)=table_names # clean up names exonerations_table=exonerations_table %&gt;% janitor::clean_names() # check structure of columns glimpse(exonerations_table) ## Rows: 2,832 ## Columns: 20 ## $ last_name &lt;chr&gt; &quot;Abbitt&quot;, &quot;Abdal&quot;, &quot;Abernathy&quot;, &quot;Abney&quot;, &quot;Acero&quot;, &quot;Adams&quot;, &quot;Adams&quot;, &quot;Adams&quot;, &quot;Adams&quot;, &quot;Adams&quot;, &quot;Adams&quot;, &quot;Adams&quot;, &quot;Ad... ## $ first_name &lt;chr&gt; &quot;Joseph&quot;, &quot;Warith Habib&quot;, &quot;Christopher&quot;, &quot;Quentin&quot;, &quot;Longino&quot;, &quot;Anthony&quot;, &quot;Cheryl&quot;, &quot;Darryl&quot;, &quot;Demetris&quot;, &quot;Don Ray&quot;,... ## $ age &lt;int&gt; 31, 43, 17, 32, 35, 26, 26, 25, 22, 32, 17, 12, 52, 21, 19, 28, 26, 29, 21, 20, 18, 19, 28, 28, 24, 31, 22, 17, 20, ... ## $ race &lt;chr&gt; &quot;Black&quot;, &quot;Black&quot;, &quot;White&quot;, &quot;Black&quot;, &quot;Hispanic&quot;, &quot;Hispanic&quot;, &quot;White&quot;, &quot;Black&quot;, &quot;Black&quot;, &quot;Black&quot;, &quot;Black&quot;, &quot;White&quot;, &quot;B... ## $ st &lt;chr&gt; &quot;NC&quot;, &quot;NY&quot;, &quot;IL&quot;, &quot;NY&quot;, &quot;CA&quot;, &quot;CA&quot;, &quot;MA&quot;, &quot;TX&quot;, &quot;IL&quot;, &quot;PA&quot;, &quot;WI&quot;, &quot;GA&quot;, &quot;TX&quot;, &quot;IL&quot;, &quot;MA&quot;, &quot;TX&quot;, &quot;LA&quot;, &quot;NY&quot;, &quot;CT&quot;, &quot;I... ## $ county_of_crime &lt;chr&gt; &quot;Forsyth&quot;, &quot;Erie&quot;, &quot;Cook&quot;, &quot;New York&quot;, &quot;Santa Clara&quot;, &quot;Los Angeles&quot;, &quot;Essex&quot;, &quot;Dallas&quot;, &quot;Cook&quot;, &quot;Philadelphia&quot;, &quot;Jef... ## $ tags &lt;chr&gt; &quot;CV, IO&quot;, &quot;IO&quot;, &quot;CIU, CV, H, IO&quot;, &quot;CV&quot;, &quot;NC, P&quot;, &quot;H, P&quot;, &quot;F, NC, P&quot;, &quot;CIU, IO, NC, P&quot;, &quot;CIU, IO, NC, P&quot;, &quot;H&quot;, &quot;IO, N... ## $ om_tags &lt;chr&gt; &quot;&quot;, &quot;OF, WH, NW, WT&quot;, &quot;OF, WH, NW, INT&quot;, &quot;&quot;, &quot;&quot;, &quot;OF, WH, NW, WT&quot;, &quot;&quot;, &quot;&quot;, &quot;OF, WH, NW&quot;, &quot;OF, WH, NW, WT&quot;, &quot;&quot;, &quot;OF, ... ## $ crime &lt;chr&gt; &quot;Child Sex Abuse&quot;, &quot;Sexual Assault&quot;, &quot;Murder&quot;, &quot;Robbery&quot;, &quot;Sex Offender Registration&quot;, &quot;Manslaughter&quot;, &quot;Theft&quot;, &quot;Sex... ## $ sentence &lt;chr&gt; &quot;Life&quot;, &quot;20 to Life&quot;, &quot;Life without parole&quot;, &quot;20 to Life&quot;, &quot;2 years and 4 months&quot;, &quot;12 years&quot;, &quot;Probation&quot;, &quot;25 year... ## $ convicted &lt;int&gt; 1995, 1983, 1987, 2006, 1994, 1996, 1989, 1992, 2004, 1992, 2000, 2005, 2009, 1978, 1974, 1977, 1983, 1998, 1999, 20... ## $ exonerated &lt;int&gt; 2009, 1999, 2015, 2012, 2006, 2001, 1993, 2017, 2020, 2011, 2007, 2006, 2016, 1996, 2004, 1989, 2014, 1999, 2013, 20... ## $ dna &lt;chr&gt; &quot;DNA&quot;, &quot;DNA&quot;, &quot;DNA&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;DNA&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;DNA&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;DNA&quot;... ## $ x &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;*&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,... ## $ mwid &lt;chr&gt; &quot;MWID&quot;, &quot;MWID&quot;, &quot;&quot;, &quot;MWID&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;MWID&quot;, &quot;&quot;, &quot;MWID&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, ... ## $ fc &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;FC&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;FC&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;FC&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;FC&quot;, &quot;FC&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;... ## $ p_fa &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;P/FA&quot;, &quot;&quot;, &quot;&quot;, &quot;P/FA&quot;, &quot;P/FA&quot;, &quot;P/FA&quot;, &quot;P/FA&quot;, &quot;P/FA&quot;, &quot;P/FA&quot;, &quot;&quot;, &quot;&quot;, &quot;P/FA&quot;, &quot;P/FA&quot;, &quot;P/FA&quot;, &quot;P/FA&quot;, &quot;P/F... ## $ f_mfe &lt;chr&gt; &quot;&quot;, &quot;F/MFE&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;F/MFE&quot;, &quot;F/MFE&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;F/MF... ## $ om &lt;chr&gt; &quot;&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;&quot;, &quot;&quot;, &quot;OM&quot;, &quot;&quot;, &quot;&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;&quot;, &quot;OM&quot;, &quot;&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;OM&quot;, &quot;OM&quot;... ## $ ild &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;ILD&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;ILD&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;ILD&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;ILD&quot;, &quot;ILD&quot;, &quot;&quot;, &quot;ILD&quot;... exonerations_table=as_tibble(exonerations_table) %&gt;% # convert to tibble mutate(across(c(dna,mwid:ild), na_if,&quot;&quot;)) %&gt;% # turn missing values into NA&#39;s mutate(across(c(dna,mwid:ild), replace_na, &quot;derp&quot;)) %&gt;% # replace NA&#39;s with a some string (needed for the next lines to work) mutate(dna=ifelse(dna==&quot;DNA&quot;,1,0), # change these variables from text to numeric to better facilitate analysis mwid=ifelse(mwid==&quot;MWID&quot;,1,0), fc=ifelse(fc==&quot;FC&quot;,1,0), p_fa=ifelse(p_fa==&quot;P/FA&quot;,1,0), f_mfe=ifelse(f_mfe==&quot;F/MFE&quot;,1,0)) %&gt;% mutate(across(c(st, crime, dna:f_mfe),factor)) # correct form by converting to factors exonerations_table ## # A tibble: 2,832 x 20 ## last_name first_name age race st county_of_crime tags om_tags crime sentence convicted exonerated dna x mwid fc p_fa f_mfe ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;fct&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Abbitt Joseph 31 Black NC Forsyth CV, ~ &quot;&quot; Chil~ Life 1995 2009 1 &quot;&quot; 1 0 0 0 ## 2 Abdal Warith Ha~ 43 Black NY Erie IO &quot;OF, W~ Sexu~ 20 to L~ 1983 1999 1 &quot;&quot; 1 0 0 1 ## 3 Abernathy Christoph~ 17 White IL Cook CIU,~ &quot;OF, W~ Murd~ Life wi~ 1987 2015 1 &quot;&quot; 0 1 1 0 ## 4 Abney Quentin 32 Black NY New York CV &quot;&quot; Robb~ 20 to L~ 2006 2012 0 &quot;&quot; 1 0 0 0 ## 5 Acero Longino 35 Hisp~ CA Santa Clara NC, P &quot;&quot; Sex ~ 2 years~ 1994 2006 0 &quot;&quot; 0 0 0 0 ## 6 Adams Anthony 26 Hisp~ CA Los Angeles H, P &quot;OF, W~ Mans~ 12 years 1996 2001 0 &quot;&quot; 0 0 1 0 ## 7 Adams Cheryl 26 White MA Essex F, N~ &quot;&quot; Theft Probati~ 1989 1993 0 &quot;&quot; 0 0 1 0 ## 8 Adams Darryl 25 Black TX Dallas CIU,~ &quot;&quot; Sexu~ 25 years 1992 2017 1 &quot;*&quot; 0 0 1 0 ## 9 Adams Demetris 22 Black IL Cook CIU,~ &quot;OF, W~ Drug~ 1 year 2004 2020 0 &quot;&quot; 0 0 1 0 ## 10 Adams Don Ray 32 Black PA Philadelphia H &quot;OF, W~ Murd~ Life 1992 2011 0 &quot;&quot; 0 0 1 0 ## # ... with 2,822 more rows, and 2 more variables: om &lt;chr&gt;, ild &lt;chr&gt; Check out this page for a quick overview. 10.2 Read SPSS files into R Use foreign::read.spss spss_version=foreign::read.spss(here::here(&quot;JLWOP&quot;, &quot;Data and Models&quot;, &quot;JLWOP_RYAN.sav&quot;), to.data.frame = TRUE) Might also want to add as_tibble() on the end. 10.3 Turn numbers into percentages Use scales::percent(), which converts normal numbers into percentages and includes the percent sign (%) afterwards simple_table=tribble(~n_people, ~votes_in_favor, 25, 14) simple_table=simple_table %&gt;% mutate(percent_voted_for=scales::percent(votes_in_favor/n_people, accuracy = 0.1, scale = 100)) simple_table ## # A tibble: 1 x 3 ## n_people votes_in_favor percent_voted_for ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 25 14 56.0% Scale is what to multiple the original number by (e.g., convert 0.05 to 5% by x100) Accuracy controls how many places out the decimal goes 10.4 Find all possible combindations of items in a vector y &lt;- c(2,4,6,8) combn(c(2,4,6,8),2) # find all possible combinations of these numbers, drawn two at a time ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 2 2 2 4 4 6 ## [2,] 4 6 8 6 8 8 10.5 Download files from the internet 10.6 Print multiple things in one statement Use cat() from base R cat(&quot;The p-value dropped below 0.05 for the first time as sample size&quot;, 100) ## The p-value dropped below 0.05 for the first time as sample size 100 "],["functions-loops-and-iterative-programming.html", "Chapter 11 Functions, Loops, and Iterative Programming 11.1 Functions 11.2 For-loops 11.3 Purrr and iterative loops", " Chapter 11 Functions, Loops, and Iterative Programming 11.1 Functions A function is a command that performs a specified operation and returns an output in accordance with that operation. # example structure Function_name=function(argument){ Expressions return(output) } Argument is your input. It is the thing you want to perform the operation on. Expressions is the actual operation (or operations) you want to perform on the supplied argument return tells R to return the result of the Expression to you when done. Example. This function takes an input of numbers in the form of a vector and subtracts two from each. numbers=c(2,10,12,80) sub_2=function(vector){ result=vector-2 return(result) } sub_2(numbers) ## [1] 0 8 10 78 You can literally make a function to do anything you want! Limitations to your average, everyday functions However, there will be times when you want to perform some kind of function to multiple items, perhaps even simultaneously. For example, finding the mean of every column in a data set. To do this, you will probably find yourself repeating the same lines of code over and over, which violates a cardinal rule of efficient coding: Never paste the same code more than twice. If you have an iterative process or a task that needs to be repeated two or more times, consider how to replace the multiple lines of code with a For Loop or an iterative function. 11.2 For-loops A for loop is essentially a function that applies a function or given set of operations iteratively on multiple things at once, and returns an output of many items. For example, this code finds the means of every vector/column in a dataset by repeatedly applying the same code over and over to element i in the given list: df &lt;- tibble( a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10) ) output &lt;- vector(&quot;double&quot;, ncol(df)) # 1.Output. Create the object you want the results of the loop stored in. for (i in seq_along(df)) { # 2.Sequence of operations. &quot;For each item &#39;i&#39; along data frame&quot; output[[i]] &lt;- median(df[[i]]) # 3.Body:&quot;every individual item in &#39;output&#39; = the median of each col in df } output ## [1] 0.3771802 -0.5176346 0.4171879 0.5704655 Check out this book chapter for a great and detailed explanation of for-loops and functional coding Although for loops are nice, they can be somewhat unwieldy. R programmers typically use iterating functions instead! Examples of iterating functions are the lapply, vapply, sapply, etc. family of base R commands. But these can be confusing and the commands are not great. The purrr package offers a better way to do iterating functions over base R; its the tidyverse way to make efficient and understandable for loops! If you have a need for a for-loop for something, see the next section instead on how to use purrr to make an iterative function. Important to understand conceptually what a for-loop is, but using them is impractical when you have purrr 11.3 Purrr and iterative loops *All notes here come from Charlotte Wickhams lecture tutorial on YouTube Purrrs map functions offer a way to apply any existing function (even functions youve made) to multiple things at once (be it lists; data frame columns, individual items in vector, etc.). When you have tasks that you want to do repeatedly, you can either copy and paste your code a bunch of times, or make an iterative function that does each task for you. You could use a for-loop to do these tasks, but {purrr} is a package that lets you build iterating functions, which have advantages over for-loops. 11.3.1 Useful ways to use map() 11.3.1.1 Apply a single function to every column in a data frame Pipe the whole data frame to the map command: df %&gt;% map_df() 11.3.1.2 Apply a function to every item in a column/vector Pipe the data frame and column/variable, and include the [ ] to index by vector position: BF_output$Evidence= BF_output$BF[] %&gt;% map_chr(effectsize::interpret_bf) 11.3.1.3 Import several files in a directory at once (batch importing) Note. This reads many .csv files into a SINGLE, unified data frame. If you want to import many files at once but keep them separated, youll need a different command # first run these commands data_dir &lt;-&quot;log dump&quot; fs::dir_ls(data_dir) csv_files &lt;- fs::dir_ls(data_dir, regexp = &quot;\\\\.csv$&quot;) # then run this File_name_here=csv_files %&gt;% map_dfr(read_csv) 11.3.2 Walkthrough Case Example This is an example walk through showing how we can use purrr to speed things up dramatically and/or reduce the use of unwanted, extra code in our scripts. In this guide Ill be building a table of LPGA Tour statistics from multiple webpages. If I tried to do each table individually, Id be copying and pasting and re-writing the same code up to four times to get each table downloaded, extracted, and formatted the way I want before I could unify them with left_join. By using purrr::map(), we can cut our needed code down by 75%. Not only does this mean we have a tidier script, but also, things will be less messy, and we have less chances for error (since we are coding less). And of course, we dont have the annoyances of redoing multiple sections of code. pacman::p_load(rvest, tidyverse) The workflow for purrr goes like this: First, you want to figure out how to do each step of your process line-by-line, for a single item. The idea is to try and walk through each step of the process and see exactly what will need to be done each each step and what the code will like, before trying to code it all at once at a higher level. Once you have each step for the first item figured out, make functions for each step that condense that code down to one command. Lastly, apply each function from your individual steps to all items in your list by using purr::map(). 11.3.3 Do for One 11.3.3.1 1. Scrape data # line html1=read_html(&quot;https://scores.nbcsports.com/golf/averages.asp?tour=LPGA&amp;rank=04&quot;) %&gt;% html_table(fill = TRUE) # function quick_read_html=function(url){ url=url %&gt;% read_html(url) %&gt;% html_table(fill = TRUE) } html=quick_read_html(&quot;https://scores.nbcsports.com/golf/averages.asp?tour=LPGA&amp;rank=04&quot;) 11.3.3.2 2. Find out which element of the list the desired table is in as_tibble(html1[[2]]) ## # A tibble: 169 x 3 ## X1 X2 X3 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Rank Name Distance ## 2 1 Anne van Dam 290.778 ## 3 2 Bianca Pagdanganan 285.021 ## 4 3 A Lim Kim 279.122 ## 5 4 Lexi Thompson 278.832 ## 6 5 Maria Fassi 278.107 ## 7 6 Brooke Henderson 275.22 ## 8 7 Jessica Korda 275.17 ## 9 8 Nanna Koerstz Madsen 274.807 ## 10 9 Patty Tavatanakit 274.653 ## # ... with 159 more rows 11.3.3.3 3. Extract the table #line table1=as_tibble(html1[[2]]) # function version extract_tibble=function(html_list){ df=as_tibble(html_list[[2]]) return(df) } table1=extract_tibble(html1) 11.3.3.4 4. Format table #line table1=table1 %&gt;% select(-X1) %&gt;% rename(&quot;Name&quot;=&quot;X2&quot;) %&gt;% slice(2:n()) head(table1) ## # A tibble: 6 x 2 ## Name X3 ## &lt;chr&gt; &lt;chr&gt; ## 1 Anne van Dam 290.778 ## 2 Bianca Pagdanganan 285.021 ## 3 A Lim Kim 279.122 ## 4 Lexi Thompson 278.832 ## 5 Maria Fassi 278.107 ## 6 Brooke Henderson 275.22 # function test_format=function(table){ table=table %&gt;% select(-X1) %&gt;% rename(&quot;Name&quot;=&quot;X2&quot;) %&gt;% slice(2:n()) return(table) } # test_format(table1) 11.3.4 DO FOR ALL #### FUNCTIONS #### # Read quick_read_html=function(url){ url=url %&gt;% read_html(url) %&gt;% html_table(fill = TRUE) } # Extract extract_tibble=function(html_list){ df=as_tibble(html_list[[2]]) return(df) } # Format test_format=function(table){ table=table %&gt;% select(-X1) %&gt;% rename(&quot;Name&quot;=&quot;X2&quot;) %&gt;% slice(2:n()) return(table) } #### GO FOR IT #### URLs=c(&quot;https://scores.nbcsports.com/golf/averages.asp?tour=LPGA&amp;rank=04&quot;, &quot;https://scores.nbcsports.com/golf/averages.asp?tour=LPGA&amp;rank=08&quot;, &quot;https://scores.nbcsports.com/golf/averages.asp?tour=LPGA&amp;rank=06&quot;, &quot;https://scores.nbcsports.com/golf/averages.asp?tour=LPGA&amp;rank=12&quot;) tables_list=URLs %&gt;% map(quick_read_html) %&gt;% #read and scrape every URL map(extract_tibble) %&gt;% # Get rid of the extra list levels map(test_format) # Apply any formatting that would be universal to all of them at once lpga_data= tables_list %&gt;% reduce(left_join, by=&quot;Name&quot;) %&gt;% # Combine all list levels into a single tibble, matching by the &quot;Name&quot; column rename(&quot;Avg_Drive&quot;=&quot;X3.x&quot;, &quot;Avg_Putts&quot;=&quot;X3.y&quot;, # final, non-universal formatting &quot;Rounds_Played&quot;=&quot;X3.y.y&quot; , &quot;Avg_Score&quot;=&quot;X4&quot;, &quot;Greens_Hit&quot;=&quot;X3.x.x&quot;) # VOILA! head(lpga_data) ## # A tibble: 6 x 6 ## Name Avg_Drive Avg_Putts Greens_Hit Rounds_Played Avg_Score ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Anne van Dam 290.778 1.869 69.3 27 73.333 ## 2 Bianca Pagdanganan 285.021 1.863 70.3 23 72.130 ## 3 A Lim Kim 279.122 1.808 71.0 37 71.703 ## 4 Lexi Thompson 278.832 1.838 77.9 48 70.146 ## 5 Maria Fassi 278.107 1.853 64.7 28 73.500 ## 6 Brooke Henderson 275.22 1.813 77.7 50 70.060 "],["intro-to-r-markdown.html", "Chapter 12 Intro to R Markdown", " Chapter 12 Intro to R Markdown "],["statistics-and-psych-specific-stuff.html", "Chapter 13 Statistics and Psych-specific Stuff 13.1 Create or sample from a distribution 13.2 Find Cohens Kappa (Interrater reliability) 13.3 Reverse-code a variable", " Chapter 13 Statistics and Psych-specific Stuff 13.1 Create or sample from a distribution Creating a binomial distribution When you do this, you are setting the true population parameter; you are in control of the Data Generating Process and the true distribution In a binomial distribution, the parameter is normally distributed, and can take any value from 0.0 to 1.0 But the data that this process generates is not normal rbinom(n= 1000, size= 1, prob = 0.5) ## [1] 0 1 0 1 1 0 1 0 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 0 1 0 0 1 0 1 0 0 1 0 0 1 1 1 1 0 0 0 1 1 0 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 1 1 ## [70] 1 1 1 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 0 1 0 0 1 0 1 0 0 1 ## [139] 1 1 1 0 1 1 1 1 0 0 0 0 0 0 0 0 1 0 1 1 1 1 0 0 0 1 0 1 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 1 1 0 0 0 1 1 0 0 1 0 1 1 1 1 1 0 ## [208] 1 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 1 0 0 1 0 0 0 1 1 ## [277] 1 0 1 1 0 0 0 1 1 0 1 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 1 1 1 1 0 1 1 1 0 0 0 0 1 0 0 0 1 1 0 1 1 1 1 1 0 1 ## [346] 0 1 1 1 1 1 0 1 0 1 0 0 0 0 1 0 0 1 0 0 1 0 1 1 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 ## [415] 0 0 0 1 0 1 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 1 1 0 1 0 0 1 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 0 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 0 1 0 1 1 1 ## [484] 1 0 1 1 1 1 1 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 0 1 0 1 1 0 0 0 1 1 1 0 0 1 ## [553] 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 0 1 0 1 1 0 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 1 ## [622] 1 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 0 1 1 0 0 0 0 1 1 0 1 0 1 0 0 ## [691] 0 1 1 1 0 1 1 1 0 0 1 0 0 0 0 0 1 0 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 1 1 0 1 1 0 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 ## [760] 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 0 0 0 0 1 1 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 0 1 0 1 0 0 0 0 1 1 0 1 ## [829] 0 0 1 1 0 1 0 1 1 0 1 0 1 1 0 1 0 1 0 1 1 0 1 1 0 1 0 0 1 1 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 0 0 1 1 ## [898] 1 0 0 1 1 0 1 1 1 1 1 0 0 0 1 1 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 0 1 1 1 0 1 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 1 ## [967] 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 1 1 rnorm(n=2500,mean=500, sd=100) ## [1] 690.7642 503.0016 446.5626 484.7566 514.2144 558.1073 372.0421 486.2422 445.8801 507.1753 582.8456 556.2646 505.3560 457.7520 552.2014 ## [16] 443.2911 516.2216 507.5774 496.2267 700.0870 486.4038 544.2314 610.0555 490.9881 564.8317 588.5202 438.1985 365.3048 467.5639 521.1525 ## [31] 617.3123 554.5895 489.1160 512.8746 711.0196 692.8460 519.8707 324.4048 441.7998 534.3156 490.2324 585.4221 430.4960 460.9629 703.4337 ## [46] 510.0744 519.9681 468.5821 527.3318 413.0651 460.6879 664.7801 354.3382 370.0553 489.8274 326.0638 343.5181 669.8929 410.4743 259.5956 ## [61] 581.9515 479.6523 434.0253 461.1315 584.3208 423.5085 556.7683 466.5056 433.8107 588.9122 358.9104 296.3319 490.2643 374.4722 508.8257 ## [76] 550.2508 413.3520 491.6750 450.5777 637.9321 418.8566 530.1711 558.6032 531.9450 422.4871 509.5001 436.4969 609.5397 390.5833 573.7023 ## [91] 332.9137 355.7153 459.6057 416.6499 435.9233 393.1971 450.7034 370.8988 325.2500 560.9520 538.7495 596.3238 456.8505 378.8018 389.1940 ## [106] 546.0309 464.9669 437.3562 595.2106 358.9524 488.1387 577.6982 451.5795 555.9834 455.0614 424.9773 512.1967 333.4369 349.7942 497.6879 ## [121] 461.4079 579.9255 570.4377 496.8774 468.6098 553.1056 693.8511 668.4453 418.9909 571.5872 626.5654 682.8749 381.1959 380.5799 529.1706 ## [136] 495.0200 602.4397 488.4812 481.2003 480.3037 517.4619 430.3098 410.7283 383.9239 507.2224 677.0574 551.9872 743.8753 447.8830 553.9661 ## [151] 660.0133 426.8833 378.0482 586.2658 608.6438 414.7819 467.3578 443.9643 505.8476 582.4859 515.8577 579.6892 452.8202 320.2918 429.6083 ## [166] 496.7879 444.7553 546.7475 461.6923 495.1302 305.6665 481.9163 570.0053 411.7289 659.6989 319.8401 577.8611 325.9026 545.4157 460.2025 ## [181] 534.0228 406.5574 532.8106 611.0717 470.5804 470.7250 399.0586 376.7103 432.2565 510.2988 501.0330 311.5054 613.5306 491.6324 592.4899 ## [196] 497.2093 253.9098 540.8763 524.1655 570.1845 568.8148 649.2078 357.9979 505.1117 560.0656 488.2058 512.4326 429.8364 369.7317 562.7482 ## [211] 380.4301 691.9237 552.0891 642.8095 381.2714 610.1536 393.5623 353.8832 557.3873 478.6679 677.2078 493.7744 381.9982 534.3512 519.5267 ## [226] 354.7870 427.7809 492.3991 527.7539 236.7285 634.5613 611.5118 573.7486 494.7876 447.2701 450.1239 447.2279 528.8756 495.6735 432.1601 ## [241] 480.7788 407.7178 519.6089 533.9601 478.7551 535.1155 502.5280 342.3943 446.9967 523.1670 562.8475 462.3585 525.2291 523.7450 532.5428 ## [256] 435.9035 458.1338 661.8657 463.5148 520.1895 497.6584 427.7127 590.0779 563.6812 527.4667 580.2521 450.2358 609.7054 687.3053 315.5045 ## [271] 381.4677 354.9862 621.2616 445.6282 493.3062 557.0388 535.6489 391.4441 517.1641 643.9891 462.9767 456.7823 594.6212 679.8447 469.5304 ## [286] 585.8058 495.7101 515.8654 585.2954 475.4714 245.2662 573.7207 571.2908 510.1705 489.8945 427.6127 381.9606 549.0644 731.1598 624.7910 ## [301] 351.4736 516.0527 502.4989 575.3473 508.8300 598.5068 626.5723 394.5084 551.1109 481.5339 602.6052 490.7534 524.8933 594.8019 511.1983 ## [316] 451.8964 493.0614 628.4617 477.1235 576.7203 469.4596 528.6711 536.4981 466.4876 529.7832 514.9179 594.0735 475.0174 379.3909 551.3659 ## [331] 416.0800 653.6031 349.7248 498.9691 603.6682 541.4988 497.6942 419.0618 461.9743 433.0824 291.6662 454.9965 429.0149 266.4133 580.8652 ## [346] 417.8723 625.2045 507.4710 391.1100 654.7852 627.8170 398.9321 384.7853 501.1054 675.6450 476.3180 440.5276 509.3056 599.2357 592.1269 ## [361] 651.7668 524.3816 421.1368 452.8244 529.8621 644.1803 478.4175 508.7750 595.8007 558.5413 571.2349 555.1023 559.2593 489.7140 493.0326 ## [376] 669.2377 469.0042 347.3663 475.9720 421.2802 645.9101 453.0382 541.1887 411.5055 666.8346 494.7872 397.1767 497.7115 486.7867 534.5902 ## [391] 439.6220 480.8484 554.9179 368.8868 460.8274 489.0922 711.1718 501.9165 418.5724 718.6710 423.1709 435.8882 532.8551 649.3885 451.9812 ## [406] 587.7714 516.2318 511.8405 380.5151 573.8564 462.3429 510.8129 275.7200 535.5461 623.0225 456.8365 490.8698 594.5922 653.8893 516.6514 ## [421] 332.8932 612.6280 524.1005 538.2043 487.1793 524.3440 497.0323 502.0975 587.9191 448.9578 476.7128 602.9146 469.7850 376.6824 499.8641 ## [436] 650.7851 615.8094 493.3007 570.9333 608.2727 559.6828 587.6076 477.4335 535.3579 459.4781 448.0090 531.2777 522.1706 543.7536 606.8745 ## [451] 463.3416 491.5422 684.6416 437.6934 476.8128 499.2137 527.9584 599.6644 396.7951 477.0358 532.5132 478.9701 610.1375 570.7250 458.6793 ## [466] 490.3939 492.9727 548.0784 491.5192 534.6258 592.4548 429.9015 622.2405 514.6087 482.5179 631.1590 548.9731 476.7655 550.6699 458.7896 ## [481] 500.6046 489.9678 521.7070 376.1594 455.4748 478.8103 500.6990 450.0641 705.1408 493.3444 340.2326 450.3086 565.5474 510.5845 607.4647 ## [496] 525.2464 601.9312 393.1189 581.0030 537.7657 453.3838 318.0283 508.4975 531.2463 373.1126 548.7601 623.4519 440.0869 652.5000 437.5633 ## [511] 506.5816 415.4071 516.0706 544.6454 487.4728 544.8934 566.9092 617.6771 548.2616 631.0511 473.4739 571.3268 368.3856 501.6164 522.8763 ## [526] 629.5952 457.4299 527.2467 326.8235 513.6585 420.4447 447.2285 441.3478 517.2391 292.0001 494.4801 527.8838 542.8061 566.1641 578.9908 ## [541] 357.2008 473.6306 677.2587 535.5803 301.3727 403.7398 414.6190 625.7101 433.4926 513.9790 290.1241 249.8849 590.1190 487.6803 571.0442 ## [556] 601.2068 469.5465 475.7392 432.6426 496.2470 418.4045 303.4358 726.0839 609.2849 500.5518 578.1233 408.7615 380.4873 594.1007 499.7439 ## [571] 531.1113 368.6508 455.1496 609.9466 458.9388 604.4078 402.9088 415.8239 448.0483 462.1295 522.6474 487.6938 456.0863 577.8719 340.5999 ## [586] 633.7612 443.4922 454.3063 610.4940 435.0683 599.6636 397.2973 374.6455 325.8588 321.3024 482.7620 374.4408 425.1393 510.4970 531.1596 ## [601] 645.9354 448.5209 531.6261 348.1992 476.0654 562.8976 379.9974 532.0484 445.4427 634.4011 368.7167 672.7004 565.7535 491.0597 731.4451 ## [616] 604.8716 421.3364 300.1127 440.5535 527.3207 420.5020 543.1092 499.6028 422.6449 742.7753 436.8232 530.8857 546.1302 647.6666 448.8163 ## [631] 366.9691 396.1402 562.1381 741.5654 426.0017 551.1103 478.2167 600.2266 532.1149 436.3339 660.6611 354.6999 488.2334 632.6080 390.4946 ## [646] 389.2055 641.5392 502.8989 586.2955 447.9865 349.9972 500.9418 283.4726 583.2403 523.0787 475.2691 539.1305 525.1959 503.8490 297.1299 ## [661] 485.4389 480.3741 525.1787 659.0466 519.6565 513.0671 360.0704 637.1515 586.5342 580.8653 435.4805 624.2765 464.9148 409.2928 565.2380 ## [676] 556.4711 392.7148 588.4800 616.1251 523.3135 495.8529 359.6408 597.8614 557.3185 547.4084 554.3561 469.9123 471.6370 552.7903 457.7323 ## [691] 509.1782 484.3411 310.7837 349.0889 469.9034 736.6610 482.3783 423.4637 607.1870 525.9129 456.5308 358.0275 605.7850 646.5580 477.9809 ## [706] 377.2324 403.8891 601.9674 613.8450 408.5394 510.2801 372.3809 693.2728 609.3073 704.5412 441.4024 623.5082 511.3888 539.7074 465.6184 ## [721] 663.6630 699.4078 444.3459 485.8474 463.9139 436.9269 583.1504 435.3909 584.0109 687.2442 626.6060 504.6432 497.2372 306.4394 430.5330 ## [736] 566.2029 441.3459 484.8510 524.0242 440.1531 554.9754 572.8674 558.5630 621.3363 635.4167 549.3009 548.0824 469.9470 728.0815 691.3732 ## [751] 650.7351 311.2510 528.0012 513.0207 443.2585 495.4862 494.3729 577.6868 511.6519 387.7507 500.9570 528.0799 392.6372 575.0573 649.4153 ## [766] 424.9899 445.2550 589.0665 456.6779 417.0215 494.1086 466.9487 507.0484 617.9516 408.3503 486.6273 519.3648 367.0132 603.6742 357.5127 ## [781] 459.2164 414.9186 477.9580 375.7157 227.5575 447.0915 552.5945 541.2205 477.3557 511.3888 366.3676 541.8846 641.1269 493.1544 444.6010 ## [796] 571.4874 507.8334 376.4408 729.4874 607.8687 453.6202 377.1565 284.5644 514.1725 582.8606 423.0604 485.5145 430.1117 616.0109 367.8656 ## [811] 393.5513 450.6351 475.9432 513.4465 620.5404 560.5519 450.3671 520.9705 493.8261 507.4381 665.0495 325.3849 508.1991 343.4316 380.3415 ## [826] 424.6257 606.1888 579.1084 462.3792 389.8099 490.8874 591.3056 465.1908 624.4178 423.0522 253.6473 462.7211 452.0061 365.4780 334.9249 ## [841] 430.0378 310.6141 587.8560 435.5059 352.7550 366.2667 496.9301 464.1797 426.3634 524.6137 575.3314 462.3060 354.1794 577.5041 288.6520 ## [856] 467.3059 478.7292 635.0938 467.7270 610.1464 442.0070 583.9132 363.9433 530.5671 549.5344 468.3479 466.9145 655.7451 512.8609 504.2036 ## [871] 538.2761 475.7039 458.7146 418.8669 606.1192 448.4299 387.2663 474.5578 576.6278 502.9695 509.4259 505.9550 557.8631 606.7899 546.4254 ## [886] 517.9671 456.8737 534.7139 532.2812 506.9922 437.5018 354.5535 547.5040 546.1719 496.7769 594.6566 566.8912 651.1099 569.2072 399.9619 ## [901] 499.5997 453.0542 503.6737 479.9079 603.6589 588.4268 480.5298 719.0702 476.4992 463.0849 515.4054 557.1812 480.2085 517.2196 429.5344 ## [916] 664.7642 565.2157 489.8956 502.2124 514.0178 534.4487 468.6748 477.4474 428.4724 342.0031 591.6231 361.7524 579.8610 503.2338 531.1024 ## [931] 378.8424 436.3192 708.5300 524.2979 451.3790 368.0187 343.0128 649.4367 593.2486 716.6372 566.0013 563.3512 323.0505 712.7242 283.4797 ## [946] 593.6304 368.4733 586.7725 402.3331 557.0522 511.9797 398.3025 623.5914 529.3349 515.1055 495.3027 594.1564 578.8444 386.4326 402.7863 ## [961] 526.0448 507.9440 334.2873 398.9222 523.8656 365.6481 488.9171 459.0526 286.3321 337.5755 613.3931 478.8902 514.2966 745.8776 475.3705 ## [976] 517.7410 544.9654 630.6918 565.4086 335.1642 531.3661 436.6194 427.9133 425.6029 557.2813 501.2163 547.3963 370.5879 490.5978 447.3090 ## [991] 512.0111 506.0593 444.2074 446.8414 401.0092 463.4028 441.7573 460.8381 494.1673 437.6966 ## [ reached getOption(&quot;max.print&quot;) -- omitted 1500 entries ] 13.2 Find Cohens Kappa (Interrater reliability) Useful for interrater agreement on categorical variables Going to use the psych package for this: https://www.rdocumentation.org/packages/psych/versions/2.1.6/topics/cohen.kappa See here for an overview of what Cohens Kappa is 13.3 Reverse-code a variable To reverse-score a variable, you should use car::recode() Can be done a few different ways, depending on how many variables youre looking to recode: # Recode just one variable df$column=recode(df$column,&quot;1 = 7 ; 2 = 6 ; 3 = 5 ; 5 = 3 ; 6 = 2 ; 7 = 1&quot;) # Recode a select bunch of variables df=df %&gt;% mutate(across(c(family_close : family_feelings), recode, &quot;1 = 7 ; 2 = 6 ; 3 = 5 ; 5 = 3 ; 6 = 2 ; 7 = 1&quot;)) # Recode the whole damn thing. All columns. df=df %&gt;% map_df(recode, &quot;1 = 7 ; 2 = 6 ; 3 = 5 ; 5 = 3 ; 6 = 2 ; 7 = 1&quot;) "],["coding-tips-and-tricks.html", "Chapter 14 Coding Tips and Tricks 14.1 Regular R stuff 14.2 Tidyverse stuff 14.3 Function-related stuff", " Chapter 14 Coding Tips and Tricks 14.1 Regular R stuff 14.1.1 Regex expressions and symbols str_remove(html$`Market Price`, pattern = &quot;$&quot;) # doesn&#39;t remove the $ sign str_remove(html$`Market Price`, pattern = &quot;\\\\$&quot;) # works 14.1.2 The new pipe (Base R) Good reading material/stuff to know: https://www.r-bloggers.com/2021/05/the-new-r-pipe/?__twitter_impression=true&amp; 14.2 Tidyverse stuff 14.2.1 Sometimes when making a function you need to use the colon-equals operator, rather than just the normal &lt;- or = assignment operators Specifically, when you have multiple named arguments in your function Read my question and someones answer on this blogpost: https://community.rstudio.com/t/help-creating-simple-function/109011/2 14.3 Function-related stuff 14.3.1 User-supplied expressions or named columns in functions 14.3.2 When a command requires a named column or data set, but youve already supplied it and its required a second time If youre writing a function with a pipe but the command youre using needs the data set defined in it, you specify it as .x Here is an example: 14.3.3 Formulas within functions Generally when you see .fn inside a function (e.g., map(x, .fn)), that means function. You put whatever formula or function you want in there. You may also see the tilde used instead, which does the same thing. "]]
